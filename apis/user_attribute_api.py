# coding: utf-8

"""
UserAttributeApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class UserAttributeApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def all_user_attribute_group_values(self, user_attribute_id, **kwargs):
        """
        Get User Attribute Group Values
        ### Returns all values of a user attribute defined by user groups, in precedence order.\n\nA user may be a member of multiple groups which define different values for a given user attribute.\nThe order of group-values in the response determines precedence for selecting which group-value applies\nto a given user.  For more information, see [Set User Attribute Group Values](#!/UserAttribute/set_user_attribute_group_values).\n\nResults will only include groups that the caller's user account has permission to see.\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.all_user_attribute_group_values(user_attribute_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_attribute_id: Id of user attribute (required)
        :param str fields: Requested fields.
        :return: list[UserAttributeGroupValue]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_attribute_id', 'fields']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_user_attribute_group_values" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'user_attribute_id' is set
        if ('user_attribute_id' not in params) or (params['user_attribute_id'] is None):
            raise ValueError("Missing the required parameter `user_attribute_id` when calling `all_user_attribute_group_values`")

        resource_path = '/user_attributes/{user_attribute_id}/group_values'.replace('{format}', 'json')
        path_params = {}
        if 'user_attribute_id' in params:
            path_params['user_attribute_id'] = params['user_attribute_id']

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[UserAttributeGroupValue]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def all_user_attributes(self, **kwargs):
        """
        Get All User Attributes
        ### Get information about all user attributes.\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.all_user_attributes(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fields: Requested fields.
        :param str sorts: Fields to sort by.
        :return: list[UserAttribute]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'sorts']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_user_attributes" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/user_attributes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'sorts' in params:
            query_params['sorts'] = params['sorts']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[UserAttribute]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_user_attribute(self, **kwargs):
        """
        Create User Attribute
        ### Create a new user attribute.\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_user_attribute(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UserAttribute body: User Attribute
        :param str fields: Requested fields.
        :return: UserAttribute
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fields']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_user_attribute" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/user_attributes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserAttribute',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_user_attribute(self, user_attribute_id, **kwargs):
        """
        Delete User Attribute
        ### Delete a user attribute (admin only).\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_user_attribute(user_attribute_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_attribute_id: Id of user_attribute (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_attribute_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_attribute" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'user_attribute_id' is set
        if ('user_attribute_id' not in params) or (params['user_attribute_id'] is None):
            raise ValueError("Missing the required parameter `user_attribute_id` when calling `delete_user_attribute`")

        resource_path = '/user_attributes/{user_attribute_id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_attribute_id' in params:
            path_params['user_attribute_id'] = params['user_attribute_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def set_user_attribute_group_values(self, user_attribute_id, body, **kwargs):
        """
        Set User Attribute Group Values
        ### Define values for a user attribute across a set of groups, in priority order.\n\nThis function defines all values for a user attribute defined by user groups. This is a global setting, potentially affecting\nall users in the system. This function replaces any existing group value definitions for the indicated user attribute.\n\nThe value of a user attribute for a given user is determined by searching the following locations, in this order:\n\n1. the user's account settings\n2. the groups that the user is a member of\n3. the default value of the user attribute, if any\n\nThe user may be a member of multiple groups which define different values for that user attribute. The order of items in the group_values parameter\ndetermines which group takes priority for that user. Lowest array index wins.\n\nAn alternate method to indicate the selection precedence of group-values is to assign numbers to the 'rank' property of each\ngroup-value object in the array. Lowest 'rank' value wins. If you use this technique, you must assign a\nrank value to every group-value object in the array.\n\nTo set a user attribute value for a single user, see [Set User Attribute Value](#!/User/set_user_attribute_user_value).\nTo set a user attribute value for all members of a group, see [Set User Attribute Group Value](#!/Group/update_user_attribute_group_value)\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_user_attribute_group_values(user_attribute_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_attribute_id: Id of user attribute (required)
        :param list[UserAttributeGroupValue] body: Array of group values. (required)
        :return: list[UserAttributeGroupValue]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_attribute_id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_user_attribute_group_values" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'user_attribute_id' is set
        if ('user_attribute_id' not in params) or (params['user_attribute_id'] is None):
            raise ValueError("Missing the required parameter `user_attribute_id` when calling `set_user_attribute_group_values`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_user_attribute_group_values`")

        resource_path = '/user_attributes/{user_attribute_id}/group_values'.replace('{format}', 'json')
        path_params = {}
        if 'user_attribute_id' in params:
            path_params['user_attribute_id'] = params['user_attribute_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[UserAttributeGroupValue]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_user_attribute(self, user_attribute_id, body, **kwargs):
        """
        Update User Attribute
        ### Update a user attribute definition.\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_user_attribute(user_attribute_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_attribute_id: Id of user attribute (required)
        :param UserAttribute body: User Attribute (required)
        :param str fields: Requested fields.
        :return: UserAttribute
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_attribute_id', 'body', 'fields']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user_attribute" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'user_attribute_id' is set
        if ('user_attribute_id' not in params) or (params['user_attribute_id'] is None):
            raise ValueError("Missing the required parameter `user_attribute_id` when calling `update_user_attribute`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_user_attribute`")

        resource_path = '/user_attributes/{user_attribute_id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_attribute_id' in params:
            path_params['user_attribute_id'] = params['user_attribute_id']

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserAttribute',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def user_attribute(self, user_attribute_id, **kwargs):
        """
        Get User Attribute
        ### Get information about a user attribute.\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_attribute(user_attribute_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_attribute_id: Id of user attribute (required)
        :param str fields: Requested fields.
        :return: UserAttribute
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_attribute_id', 'fields']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_attribute" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'user_attribute_id' is set
        if ('user_attribute_id' not in params) or (params['user_attribute_id'] is None):
            raise ValueError("Missing the required parameter `user_attribute_id` when calling `user_attribute`")

        resource_path = '/user_attributes/{user_attribute_id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_attribute_id' in params:
            path_params['user_attribute_id'] = params['user_attribute_id']

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserAttribute',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
