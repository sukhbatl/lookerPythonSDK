# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class SamlConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SamlConfig - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'enabled': 'bool',
            'idp_cert': 'str',
            'idp_url': 'str',
            'idp_issuer': 'str',
            'idp_audience': 'str',
            'user_attribute_map_email': 'str',
            'user_attribute_map_first_name': 'str',
            'user_attribute_map_last_name': 'str',
            'new_user_migration_types': 'str',
            'alternate_email_login_allowed': 'bool',
            'test_slug': 'str',
            'modified_at': 'str',
            'modified_by': 'str',
            'default_new_user_roles': 'list[Role]',
            'default_new_user_role_ids': 'list[int]',
            'set_roles_from_groups': 'bool',
            'groups_attribute': 'str',
            'groups': 'list[SamlGroupRead]',
            'groups_with_role_ids': 'list[SamlGroupWrite]',
            'auth_requires_role': 'bool',
            'url': 'str',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'idp_cert': 'idp_cert',
            'idp_url': 'idp_url',
            'idp_issuer': 'idp_issuer',
            'idp_audience': 'idp_audience',
            'user_attribute_map_email': 'user_attribute_map_email',
            'user_attribute_map_first_name': 'user_attribute_map_first_name',
            'user_attribute_map_last_name': 'user_attribute_map_last_name',
            'new_user_migration_types': 'new_user_migration_types',
            'alternate_email_login_allowed': 'alternate_email_login_allowed',
            'test_slug': 'test_slug',
            'modified_at': 'modified_at',
            'modified_by': 'modified_by',
            'default_new_user_roles': 'default_new_user_roles',
            'default_new_user_role_ids': 'default_new_user_role_ids',
            'set_roles_from_groups': 'set_roles_from_groups',
            'groups_attribute': 'groups_attribute',
            'groups': 'groups',
            'groups_with_role_ids': 'groups_with_role_ids',
            'auth_requires_role': 'auth_requires_role',
            'url': 'url',
            'can': 'can'
        }

        self._enabled = None
        self._idp_cert = None
        self._idp_url = None
        self._idp_issuer = None
        self._idp_audience = None
        self._user_attribute_map_email = None
        self._user_attribute_map_first_name = None
        self._user_attribute_map_last_name = None
        self._new_user_migration_types = None
        self._alternate_email_login_allowed = None
        self._test_slug = None
        self._modified_at = None
        self._modified_by = None
        self._default_new_user_roles = None
        self._default_new_user_role_ids = None
        self._set_roles_from_groups = None
        self._groups_attribute = None
        self._groups = None
        self._groups_with_role_ids = None
        self._auth_requires_role = None
        self._url = None
        self._can = None

    @property
    def enabled(self):
        """
        Gets the enabled of this SamlConfig.
        Enable/Disable Saml authentication for the server

        :return: The enabled of this SamlConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this SamlConfig.
        Enable/Disable Saml authentication for the server

        :param enabled: The enabled of this SamlConfig.
        :type: bool
        """
        self._enabled = enabled

    @property
    def idp_cert(self):
        """
        Gets the idp_cert of this SamlConfig.
        Identify Provider Certificate (provided by IdP)

        :return: The idp_cert of this SamlConfig.
        :rtype: str
        """
        return self._idp_cert

    @idp_cert.setter
    def idp_cert(self, idp_cert):
        """
        Sets the idp_cert of this SamlConfig.
        Identify Provider Certificate (provided by IdP)

        :param idp_cert: The idp_cert of this SamlConfig.
        :type: str
        """
        self._idp_cert = idp_cert

    @property
    def idp_url(self):
        """
        Gets the idp_url of this SamlConfig.
        Identify Provider Url (provided by IdP)

        :return: The idp_url of this SamlConfig.
        :rtype: str
        """
        return self._idp_url

    @idp_url.setter
    def idp_url(self, idp_url):
        """
        Sets the idp_url of this SamlConfig.
        Identify Provider Url (provided by IdP)

        :param idp_url: The idp_url of this SamlConfig.
        :type: str
        """
        self._idp_url = idp_url

    @property
    def idp_issuer(self):
        """
        Gets the idp_issuer of this SamlConfig.
        Identify Provider Issuer (provided by IdP)

        :return: The idp_issuer of this SamlConfig.
        :rtype: str
        """
        return self._idp_issuer

    @idp_issuer.setter
    def idp_issuer(self, idp_issuer):
        """
        Sets the idp_issuer of this SamlConfig.
        Identify Provider Issuer (provided by IdP)

        :param idp_issuer: The idp_issuer of this SamlConfig.
        :type: str
        """
        self._idp_issuer = idp_issuer

    @property
    def idp_audience(self):
        """
        Gets the idp_audience of this SamlConfig.
        Identify Provider Audience (set in IdP config). Optional in Looker. Set this only if you want Looker to validate the audience value returned by the IdP.

        :return: The idp_audience of this SamlConfig.
        :rtype: str
        """
        return self._idp_audience

    @idp_audience.setter
    def idp_audience(self, idp_audience):
        """
        Sets the idp_audience of this SamlConfig.
        Identify Provider Audience (set in IdP config). Optional in Looker. Set this only if you want Looker to validate the audience value returned by the IdP.

        :param idp_audience: The idp_audience of this SamlConfig.
        :type: str
        """
        self._idp_audience = idp_audience

    @property
    def user_attribute_map_email(self):
        """
        Gets the user_attribute_map_email of this SamlConfig.
        Name of user record attributes used to indicate email address field

        :return: The user_attribute_map_email of this SamlConfig.
        :rtype: str
        """
        return self._user_attribute_map_email

    @user_attribute_map_email.setter
    def user_attribute_map_email(self, user_attribute_map_email):
        """
        Sets the user_attribute_map_email of this SamlConfig.
        Name of user record attributes used to indicate email address field

        :param user_attribute_map_email: The user_attribute_map_email of this SamlConfig.
        :type: str
        """
        self._user_attribute_map_email = user_attribute_map_email

    @property
    def user_attribute_map_first_name(self):
        """
        Gets the user_attribute_map_first_name of this SamlConfig.
        Name of user record attributes used to indicate first name

        :return: The user_attribute_map_first_name of this SamlConfig.
        :rtype: str
        """
        return self._user_attribute_map_first_name

    @user_attribute_map_first_name.setter
    def user_attribute_map_first_name(self, user_attribute_map_first_name):
        """
        Sets the user_attribute_map_first_name of this SamlConfig.
        Name of user record attributes used to indicate first name

        :param user_attribute_map_first_name: The user_attribute_map_first_name of this SamlConfig.
        :type: str
        """
        self._user_attribute_map_first_name = user_attribute_map_first_name

    @property
    def user_attribute_map_last_name(self):
        """
        Gets the user_attribute_map_last_name of this SamlConfig.
        Name of user record attributes used to indicate last name

        :return: The user_attribute_map_last_name of this SamlConfig.
        :rtype: str
        """
        return self._user_attribute_map_last_name

    @user_attribute_map_last_name.setter
    def user_attribute_map_last_name(self, user_attribute_map_last_name):
        """
        Sets the user_attribute_map_last_name of this SamlConfig.
        Name of user record attributes used to indicate last name

        :param user_attribute_map_last_name: The user_attribute_map_last_name of this SamlConfig.
        :type: str
        """
        self._user_attribute_map_last_name = user_attribute_map_last_name

    @property
    def new_user_migration_types(self):
        """
        Gets the new_user_migration_types of this SamlConfig.
        Merge first-time saml login to existing user account by email addresses. When a user logs in for the first time via saml this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'

        :return: The new_user_migration_types of this SamlConfig.
        :rtype: str
        """
        return self._new_user_migration_types

    @new_user_migration_types.setter
    def new_user_migration_types(self, new_user_migration_types):
        """
        Sets the new_user_migration_types of this SamlConfig.
        Merge first-time saml login to existing user account by email addresses. When a user logs in for the first time via saml this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'

        :param new_user_migration_types: The new_user_migration_types of this SamlConfig.
        :type: str
        """
        self._new_user_migration_types = new_user_migration_types

    @property
    def alternate_email_login_allowed(self):
        """
        Gets the alternate_email_login_allowed of this SamlConfig.
        Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.

        :return: The alternate_email_login_allowed of this SamlConfig.
        :rtype: bool
        """
        return self._alternate_email_login_allowed

    @alternate_email_login_allowed.setter
    def alternate_email_login_allowed(self, alternate_email_login_allowed):
        """
        Sets the alternate_email_login_allowed of this SamlConfig.
        Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.

        :param alternate_email_login_allowed: The alternate_email_login_allowed of this SamlConfig.
        :type: bool
        """
        self._alternate_email_login_allowed = alternate_email_login_allowed

    @property
    def test_slug(self):
        """
        Gets the test_slug of this SamlConfig.
        Slug to identify configurations that are created in order to run a Saml config test

        :return: The test_slug of this SamlConfig.
        :rtype: str
        """
        return self._test_slug

    @test_slug.setter
    def test_slug(self, test_slug):
        """
        Sets the test_slug of this SamlConfig.
        Slug to identify configurations that are created in order to run a Saml config test

        :param test_slug: The test_slug of this SamlConfig.
        :type: str
        """
        self._test_slug = test_slug

    @property
    def modified_at(self):
        """
        Gets the modified_at of this SamlConfig.
        When this config was last modified

        :return: The modified_at of this SamlConfig.
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """
        Sets the modified_at of this SamlConfig.
        When this config was last modified

        :param modified_at: The modified_at of this SamlConfig.
        :type: str
        """
        self._modified_at = modified_at

    @property
    def modified_by(self):
        """
        Gets the modified_by of this SamlConfig.
        User id of user who last modified this config

        :return: The modified_by of this SamlConfig.
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """
        Sets the modified_by of this SamlConfig.
        User id of user who last modified this config

        :param modified_by: The modified_by of this SamlConfig.
        :type: str
        """
        self._modified_by = modified_by

    @property
    def default_new_user_roles(self):
        """
        Gets the default_new_user_roles of this SamlConfig.
        (Read-only) Roles that will be applied to new users the first time they login via Saml

        :return: The default_new_user_roles of this SamlConfig.
        :rtype: list[Role]
        """
        return self._default_new_user_roles

    @default_new_user_roles.setter
    def default_new_user_roles(self, default_new_user_roles):
        """
        Sets the default_new_user_roles of this SamlConfig.
        (Read-only) Roles that will be applied to new users the first time they login via Saml

        :param default_new_user_roles: The default_new_user_roles of this SamlConfig.
        :type: list[Role]
        """
        self._default_new_user_roles = default_new_user_roles

    @property
    def default_new_user_role_ids(self):
        """
        Gets the default_new_user_role_ids of this SamlConfig.
        (Write-only) Array of ids of roles that will be applied to new users the first time they login via Saml

        :return: The default_new_user_role_ids of this SamlConfig.
        :rtype: list[int]
        """
        return self._default_new_user_role_ids

    @default_new_user_role_ids.setter
    def default_new_user_role_ids(self, default_new_user_role_ids):
        """
        Sets the default_new_user_role_ids of this SamlConfig.
        (Write-only) Array of ids of roles that will be applied to new users the first time they login via Saml

        :param default_new_user_role_ids: The default_new_user_role_ids of this SamlConfig.
        :type: list[int]
        """
        self._default_new_user_role_ids = default_new_user_role_ids

    @property
    def set_roles_from_groups(self):
        """
        Gets the set_roles_from_groups of this SamlConfig.
        Set user roles in Looker based on groups from Saml

        :return: The set_roles_from_groups of this SamlConfig.
        :rtype: bool
        """
        return self._set_roles_from_groups

    @set_roles_from_groups.setter
    def set_roles_from_groups(self, set_roles_from_groups):
        """
        Sets the set_roles_from_groups of this SamlConfig.
        Set user roles in Looker based on groups from Saml

        :param set_roles_from_groups: The set_roles_from_groups of this SamlConfig.
        :type: bool
        """
        self._set_roles_from_groups = set_roles_from_groups

    @property
    def groups_attribute(self):
        """
        Gets the groups_attribute of this SamlConfig.
        Name of user record attributes used to indicate groups

        :return: The groups_attribute of this SamlConfig.
        :rtype: str
        """
        return self._groups_attribute

    @groups_attribute.setter
    def groups_attribute(self, groups_attribute):
        """
        Sets the groups_attribute of this SamlConfig.
        Name of user record attributes used to indicate groups

        :param groups_attribute: The groups_attribute of this SamlConfig.
        :type: str
        """
        self._groups_attribute = groups_attribute

    @property
    def groups(self):
        """
        Gets the groups of this SamlConfig.
        (Read-only) Array of mappings between Saml Groups and Looker Roles

        :return: The groups of this SamlConfig.
        :rtype: list[SamlGroupRead]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """
        Sets the groups of this SamlConfig.
        (Read-only) Array of mappings between Saml Groups and Looker Roles

        :param groups: The groups of this SamlConfig.
        :type: list[SamlGroupRead]
        """
        self._groups = groups

    @property
    def groups_with_role_ids(self):
        """
        Gets the groups_with_role_ids of this SamlConfig.
        (Rread/Write) Array of mappings between Saml Groups and arrays of Looker Role ids

        :return: The groups_with_role_ids of this SamlConfig.
        :rtype: list[SamlGroupWrite]
        """
        return self._groups_with_role_ids

    @groups_with_role_ids.setter
    def groups_with_role_ids(self, groups_with_role_ids):
        """
        Sets the groups_with_role_ids of this SamlConfig.
        (Rread/Write) Array of mappings between Saml Groups and arrays of Looker Role ids

        :param groups_with_role_ids: The groups_with_role_ids of this SamlConfig.
        :type: list[SamlGroupWrite]
        """
        self._groups_with_role_ids = groups_with_role_ids

    @property
    def auth_requires_role(self):
        """
        Gets the auth_requires_role of this SamlConfig.
        Users will not be allowed to login at all unless a role for them is found in Saml if set to true

        :return: The auth_requires_role of this SamlConfig.
        :rtype: bool
        """
        return self._auth_requires_role

    @auth_requires_role.setter
    def auth_requires_role(self, auth_requires_role):
        """
        Sets the auth_requires_role of this SamlConfig.
        Users will not be allowed to login at all unless a role for them is found in Saml if set to true

        :param auth_requires_role: The auth_requires_role of this SamlConfig.
        :type: bool
        """
        self._auth_requires_role = auth_requires_role

    @property
    def url(self):
        """
        Gets the url of this SamlConfig.
        Link to get this item

        :return: The url of this SamlConfig.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this SamlConfig.
        Link to get this item

        :param url: The url of this SamlConfig.
        :type: str
        """
        self._url = url

    @property
    def can(self):
        """
        Gets the can of this SamlConfig.
        Operations the current user is able to perform on this object

        :return: The can of this SamlConfig.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this SamlConfig.
        Operations the current user is able to perform on this object

        :param can: The can of this SamlConfig.
        :type: dict(str, bool)
        """
        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

