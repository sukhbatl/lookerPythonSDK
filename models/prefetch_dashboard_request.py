# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class PrefetchDashboardRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PrefetchDashboardRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ttl': 'int',
            'access_filters': 'list[PrefetchAccessFilterValue]',
            'dashboard_filters': 'list[PrefetchDashboardFilterValue]',
            'created_at': 'datetime',
            'computation_time': 'float',
            'result_size_bytes': 'int',
            'hit_count': 'int',
            'touched_at': 'datetime',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'ttl': 'ttl',
            'access_filters': 'access_filters',
            'dashboard_filters': 'dashboard_filters',
            'created_at': 'created_at',
            'computation_time': 'computation_time',
            'result_size_bytes': 'result_size_bytes',
            'hit_count': 'hit_count',
            'touched_at': 'touched_at',
            'can': 'can'
        }

        self._ttl = None
        self._access_filters = None
        self._dashboard_filters = None
        self._created_at = None
        self._computation_time = None
        self._result_size_bytes = None
        self._hit_count = None
        self._touched_at = None
        self._can = None

    @property
    def ttl(self):
        """
        Gets the ttl of this PrefetchDashboardRequest.
        Number of seconds prefetch will live for.

        :return: The ttl of this PrefetchDashboardRequest.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """
        Sets the ttl of this PrefetchDashboardRequest.
        Number of seconds prefetch will live for.

        :param ttl: The ttl of this PrefetchDashboardRequest.
        :type: int
        """
        self._ttl = ttl

    @property
    def access_filters(self):
        """
        Gets the access_filters of this PrefetchDashboardRequest.
        Access filters to apply when running queries for prefetch.

        :return: The access_filters of this PrefetchDashboardRequest.
        :rtype: list[PrefetchAccessFilterValue]
        """
        return self._access_filters

    @access_filters.setter
    def access_filters(self, access_filters):
        """
        Sets the access_filters of this PrefetchDashboardRequest.
        Access filters to apply when running queries for prefetch.

        :param access_filters: The access_filters of this PrefetchDashboardRequest.
        :type: list[PrefetchAccessFilterValue]
        """
        self._access_filters = access_filters

    @property
    def dashboard_filters(self):
        """
        Gets the dashboard_filters of this PrefetchDashboardRequest.
        Dashboard filters to apply when running queries for prefetch.

        :return: The dashboard_filters of this PrefetchDashboardRequest.
        :rtype: list[PrefetchDashboardFilterValue]
        """
        return self._dashboard_filters

    @dashboard_filters.setter
    def dashboard_filters(self, dashboard_filters):
        """
        Sets the dashboard_filters of this PrefetchDashboardRequest.
        Dashboard filters to apply when running queries for prefetch.

        :param dashboard_filters: The dashboard_filters of this PrefetchDashboardRequest.
        :type: list[PrefetchDashboardFilterValue]
        """
        self._dashboard_filters = dashboard_filters

    @property
    def created_at(self):
        """
        Gets the created_at of this PrefetchDashboardRequest.
        Time when prefetch was created.

        :return: The created_at of this PrefetchDashboardRequest.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this PrefetchDashboardRequest.
        Time when prefetch was created.

        :param created_at: The created_at of this PrefetchDashboardRequest.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def computation_time(self):
        """
        Gets the computation_time of this PrefetchDashboardRequest.
        Number of seconds it took to compute results for prefetch.

        :return: The computation_time of this PrefetchDashboardRequest.
        :rtype: float
        """
        return self._computation_time

    @computation_time.setter
    def computation_time(self, computation_time):
        """
        Sets the computation_time of this PrefetchDashboardRequest.
        Number of seconds it took to compute results for prefetch.

        :param computation_time: The computation_time of this PrefetchDashboardRequest.
        :type: float
        """
        self._computation_time = computation_time

    @property
    def result_size_bytes(self):
        """
        Gets the result_size_bytes of this PrefetchDashboardRequest.
        Size of result.

        :return: The result_size_bytes of this PrefetchDashboardRequest.
        :rtype: int
        """
        return self._result_size_bytes

    @result_size_bytes.setter
    def result_size_bytes(self, result_size_bytes):
        """
        Sets the result_size_bytes of this PrefetchDashboardRequest.
        Size of result.

        :param result_size_bytes: The result_size_bytes of this PrefetchDashboardRequest.
        :type: int
        """
        self._result_size_bytes = result_size_bytes

    @property
    def hit_count(self):
        """
        Gets the hit_count of this PrefetchDashboardRequest.
        Number of times prefetch has been accessed.

        :return: The hit_count of this PrefetchDashboardRequest.
        :rtype: int
        """
        return self._hit_count

    @hit_count.setter
    def hit_count(self, hit_count):
        """
        Sets the hit_count of this PrefetchDashboardRequest.
        Number of times prefetch has been accessed.

        :param hit_count: The hit_count of this PrefetchDashboardRequest.
        :type: int
        """
        self._hit_count = hit_count

    @property
    def touched_at(self):
        """
        Gets the touched_at of this PrefetchDashboardRequest.
        Time when prefetch was last accessed.

        :return: The touched_at of this PrefetchDashboardRequest.
        :rtype: datetime
        """
        return self._touched_at

    @touched_at.setter
    def touched_at(self, touched_at):
        """
        Sets the touched_at of this PrefetchDashboardRequest.
        Time when prefetch was last accessed.

        :param touched_at: The touched_at of this PrefetchDashboardRequest.
        :type: datetime
        """
        self._touched_at = touched_at

    @property
    def can(self):
        """
        Gets the can of this PrefetchDashboardRequest.
        Operations the current user is able to perform on this object

        :return: The can of this PrefetchDashboardRequest.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this PrefetchDashboardRequest.
        Operations the current user is able to perform on this object

        :param can: The can of this PrefetchDashboardRequest.
        :type: dict(str, bool)
        """
        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

