# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CreateQueryTask(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CreateQueryTask - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'query_id': 'int',
            'result_format': 'str',
            'source': 'str',
            'deferred': 'bool',
            'look_id': 'int',
            'dashboard_id': 'str',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'query_id': 'query_id',
            'result_format': 'result_format',
            'source': 'source',
            'deferred': 'deferred',
            'look_id': 'look_id',
            'dashboard_id': 'dashboard_id',
            'can': 'can'
        }

        self._query_id = None
        self._result_format = None
        self._source = None
        self._deferred = None
        self._look_id = None
        self._dashboard_id = None
        self._can = None

    @property
    def query_id(self):
        """
        Gets the query_id of this CreateQueryTask.
        Id of query to run

        :return: The query_id of this CreateQueryTask.
        :rtype: int
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """
        Sets the query_id of this CreateQueryTask.
        Id of query to run

        :param query_id: The query_id of this CreateQueryTask.
        :type: int
        """
        self._query_id = query_id

    @property
    def result_format(self):
        """
        Gets the result_format of this CreateQueryTask.
        Desired result format

        :return: The result_format of this CreateQueryTask.
        :rtype: str
        """
        return self._result_format

    @result_format.setter
    def result_format(self, result_format):
        """
        Sets the result_format of this CreateQueryTask.
        Desired result format

        :param result_format: The result_format of this CreateQueryTask.
        :type: str
        """
        self._result_format = result_format

    @property
    def source(self):
        """
        Gets the source of this CreateQueryTask.
        Source of query task

        :return: The source of this CreateQueryTask.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this CreateQueryTask.
        Source of query task

        :param source: The source of this CreateQueryTask.
        :type: str
        """
        self._source = source

    @property
    def deferred(self):
        """
        Gets the deferred of this CreateQueryTask.
        Create the task but defer execution

        :return: The deferred of this CreateQueryTask.
        :rtype: bool
        """
        return self._deferred

    @deferred.setter
    def deferred(self, deferred):
        """
        Sets the deferred of this CreateQueryTask.
        Create the task but defer execution

        :param deferred: The deferred of this CreateQueryTask.
        :type: bool
        """
        self._deferred = deferred

    @property
    def look_id(self):
        """
        Gets the look_id of this CreateQueryTask.
        Id of look associated with query.

        :return: The look_id of this CreateQueryTask.
        :rtype: int
        """
        return self._look_id

    @look_id.setter
    def look_id(self, look_id):
        """
        Sets the look_id of this CreateQueryTask.
        Id of look associated with query.

        :param look_id: The look_id of this CreateQueryTask.
        :type: int
        """
        self._look_id = look_id

    @property
    def dashboard_id(self):
        """
        Gets the dashboard_id of this CreateQueryTask.
        Id of dashboard associated with query.

        :return: The dashboard_id of this CreateQueryTask.
        :rtype: str
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """
        Sets the dashboard_id of this CreateQueryTask.
        Id of dashboard associated with query.

        :param dashboard_id: The dashboard_id of this CreateQueryTask.
        :type: str
        """
        self._dashboard_id = dashboard_id

    @property
    def can(self):
        """
        Gets the can of this CreateQueryTask.
        Operations the current user is able to perform on this object

        :return: The can of this CreateQueryTask.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this CreateQueryTask.
        Operations the current user is able to perform on this object

        :param can: The can of this CreateQueryTask.
        :type: dict(str, bool)
        """
        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

