# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class LookWithQuery(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LookWithQuery - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'content_metadata_id': 'int',
            'view_count': 'int',
            'favorite_count': 'int',
            'content_favorite_id': 'int',
            'title': 'str',
            'user': 'UserIdOnly',
            'query_id': 'int',
            'description': 'str',
            'short_url': 'str',
            'space': 'SpaceBase',
            'public': 'bool',
            'public_slug': 'str',
            'user_id': 'int',
            'space_id': 'str',
            'model': 'LookModel',
            'public_url': 'str',
            'embed_url': 'str',
            'google_spreadsheet_formula': 'str',
            'excel_file_url': 'str',
            'url': 'str',
            'query': 'Query',
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'last_updater_id': 'int',
            'last_viewed_at': 'datetime',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'id': 'id',
            'content_metadata_id': 'content_metadata_id',
            'view_count': 'view_count',
            'favorite_count': 'favorite_count',
            'content_favorite_id': 'content_favorite_id',
            'title': 'title',
            'user': 'user',
            'query_id': 'query_id',
            'description': 'description',
            'short_url': 'short_url',
            'space': 'space',
            'public': 'public',
            'public_slug': 'public_slug',
            'user_id': 'user_id',
            'space_id': 'space_id',
            'model': 'model',
            'public_url': 'public_url',
            'embed_url': 'embed_url',
            'google_spreadsheet_formula': 'google_spreadsheet_formula',
            'excel_file_url': 'excel_file_url',
            'url': 'url',
            'query': 'query',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'last_updater_id': 'last_updater_id',
            'last_viewed_at': 'last_viewed_at',
            'can': 'can'
        }

        self._id = None
        self._content_metadata_id = None
        self._view_count = None
        self._favorite_count = None
        self._content_favorite_id = None
        self._title = None
        self._user = None
        self._query_id = None
        self._description = None
        self._short_url = None
        self._space = None
        self._public = None
        self._public_slug = None
        self._user_id = None
        self._space_id = None
        self._model = None
        self._public_url = None
        self._embed_url = None
        self._google_spreadsheet_formula = None
        self._excel_file_url = None
        self._url = None
        self._query = None
        self._created_at = None
        self._updated_at = None
        self._last_updater_id = None
        self._last_viewed_at = None
        self._can = None

    @property
    def id(self):
        """
        Gets the id of this LookWithQuery.
        Unique Id

        :return: The id of this LookWithQuery.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LookWithQuery.
        Unique Id

        :param id: The id of this LookWithQuery.
        :type: int
        """
        self._id = id

    @property
    def content_metadata_id(self):
        """
        Gets the content_metadata_id of this LookWithQuery.
        Id of content metadata

        :return: The content_metadata_id of this LookWithQuery.
        :rtype: int
        """
        return self._content_metadata_id

    @content_metadata_id.setter
    def content_metadata_id(self, content_metadata_id):
        """
        Sets the content_metadata_id of this LookWithQuery.
        Id of content metadata

        :param content_metadata_id: The content_metadata_id of this LookWithQuery.
        :type: int
        """
        self._content_metadata_id = content_metadata_id

    @property
    def view_count(self):
        """
        Gets the view_count of this LookWithQuery.
        Number of times viewed in the Looker web UI

        :return: The view_count of this LookWithQuery.
        :rtype: int
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """
        Sets the view_count of this LookWithQuery.
        Number of times viewed in the Looker web UI

        :param view_count: The view_count of this LookWithQuery.
        :type: int
        """
        self._view_count = view_count

    @property
    def favorite_count(self):
        """
        Gets the favorite_count of this LookWithQuery.
        Number of times favorited

        :return: The favorite_count of this LookWithQuery.
        :rtype: int
        """
        return self._favorite_count

    @favorite_count.setter
    def favorite_count(self, favorite_count):
        """
        Sets the favorite_count of this LookWithQuery.
        Number of times favorited

        :param favorite_count: The favorite_count of this LookWithQuery.
        :type: int
        """
        self._favorite_count = favorite_count

    @property
    def content_favorite_id(self):
        """
        Gets the content_favorite_id of this LookWithQuery.
        Content Favorite Id

        :return: The content_favorite_id of this LookWithQuery.
        :rtype: int
        """
        return self._content_favorite_id

    @content_favorite_id.setter
    def content_favorite_id(self, content_favorite_id):
        """
        Sets the content_favorite_id of this LookWithQuery.
        Content Favorite Id

        :param content_favorite_id: The content_favorite_id of this LookWithQuery.
        :type: int
        """
        self._content_favorite_id = content_favorite_id

    @property
    def title(self):
        """
        Gets the title of this LookWithQuery.
        Look Title

        :return: The title of this LookWithQuery.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this LookWithQuery.
        Look Title

        :param title: The title of this LookWithQuery.
        :type: str
        """
        self._title = title

    @property
    def user(self):
        """
        Gets the user of this LookWithQuery.
        User

        :return: The user of this LookWithQuery.
        :rtype: UserIdOnly
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this LookWithQuery.
        User

        :param user: The user of this LookWithQuery.
        :type: UserIdOnly
        """
        self._user = user

    @property
    def query_id(self):
        """
        Gets the query_id of this LookWithQuery.
        Query Id

        :return: The query_id of this LookWithQuery.
        :rtype: int
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """
        Sets the query_id of this LookWithQuery.
        Query Id

        :param query_id: The query_id of this LookWithQuery.
        :type: int
        """
        self._query_id = query_id

    @property
    def description(self):
        """
        Gets the description of this LookWithQuery.
        Description

        :return: The description of this LookWithQuery.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this LookWithQuery.
        Description

        :param description: The description of this LookWithQuery.
        :type: str
        """
        self._description = description

    @property
    def short_url(self):
        """
        Gets the short_url of this LookWithQuery.
        Short Url

        :return: The short_url of this LookWithQuery.
        :rtype: str
        """
        return self._short_url

    @short_url.setter
    def short_url(self, short_url):
        """
        Sets the short_url of this LookWithQuery.
        Short Url

        :param short_url: The short_url of this LookWithQuery.
        :type: str
        """
        self._short_url = short_url

    @property
    def space(self):
        """
        Gets the space of this LookWithQuery.
        Space of this Look

        :return: The space of this LookWithQuery.
        :rtype: SpaceBase
        """
        return self._space

    @space.setter
    def space(self, space):
        """
        Sets the space of this LookWithQuery.
        Space of this Look

        :param space: The space of this LookWithQuery.
        :type: SpaceBase
        """
        self._space = space

    @property
    def public(self):
        """
        Gets the public of this LookWithQuery.
        Is Public

        :return: The public of this LookWithQuery.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """
        Sets the public of this LookWithQuery.
        Is Public

        :param public: The public of this LookWithQuery.
        :type: bool
        """
        self._public = public

    @property
    def public_slug(self):
        """
        Gets the public_slug of this LookWithQuery.
        Public Slug

        :return: The public_slug of this LookWithQuery.
        :rtype: str
        """
        return self._public_slug

    @public_slug.setter
    def public_slug(self, public_slug):
        """
        Sets the public_slug of this LookWithQuery.
        Public Slug

        :param public_slug: The public_slug of this LookWithQuery.
        :type: str
        """
        self._public_slug = public_slug

    @property
    def user_id(self):
        """
        Gets the user_id of this LookWithQuery.
        (Write-only) User Id

        :return: The user_id of this LookWithQuery.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this LookWithQuery.
        (Write-only) User Id

        :param user_id: The user_id of this LookWithQuery.
        :type: int
        """
        self._user_id = user_id

    @property
    def space_id(self):
        """
        Gets the space_id of this LookWithQuery.
        (Write-only) Space Id

        :return: The space_id of this LookWithQuery.
        :rtype: str
        """
        return self._space_id

    @space_id.setter
    def space_id(self, space_id):
        """
        Sets the space_id of this LookWithQuery.
        (Write-only) Space Id

        :param space_id: The space_id of this LookWithQuery.
        :type: str
        """
        self._space_id = space_id

    @property
    def model(self):
        """
        Gets the model of this LookWithQuery.
        Model

        :return: The model of this LookWithQuery.
        :rtype: LookModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this LookWithQuery.
        Model

        :param model: The model of this LookWithQuery.
        :type: LookModel
        """
        self._model = model

    @property
    def public_url(self):
        """
        Gets the public_url of this LookWithQuery.
        Public Url

        :return: The public_url of this LookWithQuery.
        :rtype: str
        """
        return self._public_url

    @public_url.setter
    def public_url(self, public_url):
        """
        Sets the public_url of this LookWithQuery.
        Public Url

        :param public_url: The public_url of this LookWithQuery.
        :type: str
        """
        self._public_url = public_url

    @property
    def embed_url(self):
        """
        Gets the embed_url of this LookWithQuery.
        Embed Url

        :return: The embed_url of this LookWithQuery.
        :rtype: str
        """
        return self._embed_url

    @embed_url.setter
    def embed_url(self, embed_url):
        """
        Sets the embed_url of this LookWithQuery.
        Embed Url

        :param embed_url: The embed_url of this LookWithQuery.
        :type: str
        """
        self._embed_url = embed_url

    @property
    def google_spreadsheet_formula(self):
        """
        Gets the google_spreadsheet_formula of this LookWithQuery.
        Google Spreadsheet Formula

        :return: The google_spreadsheet_formula of this LookWithQuery.
        :rtype: str
        """
        return self._google_spreadsheet_formula

    @google_spreadsheet_formula.setter
    def google_spreadsheet_formula(self, google_spreadsheet_formula):
        """
        Sets the google_spreadsheet_formula of this LookWithQuery.
        Google Spreadsheet Formula

        :param google_spreadsheet_formula: The google_spreadsheet_formula of this LookWithQuery.
        :type: str
        """
        self._google_spreadsheet_formula = google_spreadsheet_formula

    @property
    def excel_file_url(self):
        """
        Gets the excel_file_url of this LookWithQuery.
        Excel File Url

        :return: The excel_file_url of this LookWithQuery.
        :rtype: str
        """
        return self._excel_file_url

    @excel_file_url.setter
    def excel_file_url(self, excel_file_url):
        """
        Sets the excel_file_url of this LookWithQuery.
        Excel File Url

        :param excel_file_url: The excel_file_url of this LookWithQuery.
        :type: str
        """
        self._excel_file_url = excel_file_url

    @property
    def url(self):
        """
        Gets the url of this LookWithQuery.
        Url

        :return: The url of this LookWithQuery.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this LookWithQuery.
        Url

        :param url: The url of this LookWithQuery.
        :type: str
        """
        self._url = url

    @property
    def query(self):
        """
        Gets the query of this LookWithQuery.
        Query

        :return: The query of this LookWithQuery.
        :rtype: Query
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this LookWithQuery.
        Query

        :param query: The query of this LookWithQuery.
        :type: Query
        """
        self._query = query

    @property
    def created_at(self):
        """
        Gets the created_at of this LookWithQuery.
        Time that the Look was created.

        :return: The created_at of this LookWithQuery.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this LookWithQuery.
        Time that the Look was created.

        :param created_at: The created_at of this LookWithQuery.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this LookWithQuery.
        Time that the Look was updated.

        :return: The updated_at of this LookWithQuery.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this LookWithQuery.
        Time that the Look was updated.

        :param updated_at: The updated_at of this LookWithQuery.
        :type: datetime
        """
        self._updated_at = updated_at

    @property
    def last_updater_id(self):
        """
        Gets the last_updater_id of this LookWithQuery.
        (Write-only) Id of User that last updated the look.

        :return: The last_updater_id of this LookWithQuery.
        :rtype: int
        """
        return self._last_updater_id

    @last_updater_id.setter
    def last_updater_id(self, last_updater_id):
        """
        Sets the last_updater_id of this LookWithQuery.
        (Write-only) Id of User that last updated the look.

        :param last_updater_id: The last_updater_id of this LookWithQuery.
        :type: int
        """
        self._last_updater_id = last_updater_id

    @property
    def last_viewed_at(self):
        """
        Gets the last_viewed_at of this LookWithQuery.
        Time last viewed in the Looker web UI

        :return: The last_viewed_at of this LookWithQuery.
        :rtype: datetime
        """
        return self._last_viewed_at

    @last_viewed_at.setter
    def last_viewed_at(self, last_viewed_at):
        """
        Sets the last_viewed_at of this LookWithQuery.
        Time last viewed in the Looker web UI

        :param last_viewed_at: The last_viewed_at of this LookWithQuery.
        :type: datetime
        """
        self._last_viewed_at = last_viewed_at

    @property
    def can(self):
        """
        Gets the can of this LookWithQuery.
        Operations the current user is able to perform on this object

        :return: The can of this LookWithQuery.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this LookWithQuery.
        Operations the current user is able to perform on this object

        :param can: The can of this LookWithQuery.
        :type: dict(str, bool)
        """
        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

