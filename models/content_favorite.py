# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ContentFavorite(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ContentFavorite - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'user_id': 'int',
            'look_id': 'int',
            'dashboard_id': 'int',
            'look': 'LookBasic',
            'dashboard': 'DashboardBase',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'id': 'id',
            'user_id': 'user_id',
            'look_id': 'look_id',
            'dashboard_id': 'dashboard_id',
            'look': 'look',
            'dashboard': 'dashboard',
            'can': 'can'
        }

        self._id = None
        self._user_id = None
        self._look_id = None
        self._dashboard_id = None
        self._look = None
        self._dashboard = None
        self._can = None

    @property
    def id(self):
        """
        Gets the id of this ContentFavorite.
        Unique Id

        :return: The id of this ContentFavorite.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ContentFavorite.
        Unique Id

        :param id: The id of this ContentFavorite.
        :type: int
        """
        self._id = id

    @property
    def user_id(self):
        """
        Gets the user_id of this ContentFavorite.
        User Id which owns this ContentFavorite

        :return: The user_id of this ContentFavorite.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this ContentFavorite.
        User Id which owns this ContentFavorite

        :param user_id: The user_id of this ContentFavorite.
        :type: int
        """
        self._user_id = user_id

    @property
    def look_id(self):
        """
        Gets the look_id of this ContentFavorite.
        Id of a look

        :return: The look_id of this ContentFavorite.
        :rtype: int
        """
        return self._look_id

    @look_id.setter
    def look_id(self, look_id):
        """
        Sets the look_id of this ContentFavorite.
        Id of a look

        :param look_id: The look_id of this ContentFavorite.
        :type: int
        """
        self._look_id = look_id

    @property
    def dashboard_id(self):
        """
        Gets the dashboard_id of this ContentFavorite.
        Id of a dashboard

        :return: The dashboard_id of this ContentFavorite.
        :rtype: int
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """
        Sets the dashboard_id of this ContentFavorite.
        Id of a dashboard

        :param dashboard_id: The dashboard_id of this ContentFavorite.
        :type: int
        """
        self._dashboard_id = dashboard_id

    @property
    def look(self):
        """
        Gets the look of this ContentFavorite.
        Associated Look

        :return: The look of this ContentFavorite.
        :rtype: LookBasic
        """
        return self._look

    @look.setter
    def look(self, look):
        """
        Sets the look of this ContentFavorite.
        Associated Look

        :param look: The look of this ContentFavorite.
        :type: LookBasic
        """
        self._look = look

    @property
    def dashboard(self):
        """
        Gets the dashboard of this ContentFavorite.
        Associated Dashboard

        :return: The dashboard of this ContentFavorite.
        :rtype: DashboardBase
        """
        return self._dashboard

    @dashboard.setter
    def dashboard(self, dashboard):
        """
        Sets the dashboard of this ContentFavorite.
        Associated Dashboard

        :param dashboard: The dashboard of this ContentFavorite.
        :type: DashboardBase
        """
        self._dashboard = dashboard

    @property
    def can(self):
        """
        Gets the can of this ContentFavorite.
        Operations the current user is able to perform on this object

        :return: The can of this ContentFavorite.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this ContentFavorite.
        Operations the current user is able to perform on this object

        :param can: The can of this ContentFavorite.
        :type: dict(str, bool)
        """
        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

