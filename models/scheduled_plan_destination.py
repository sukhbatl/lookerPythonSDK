# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ScheduledPlanDestination(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ScheduledPlanDestination - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'scheduled_plan_id': 'int',
            'format': 'str',
            'apply_formatting': 'bool',
            'address': 'str',
            'looker_recipient': 'bool',
            'type': 'str',
            'parameters': 'str',
            'secret_parameters': 'str',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'id': 'id',
            'scheduled_plan_id': 'scheduled_plan_id',
            'format': 'format',
            'apply_formatting': 'apply_formatting',
            'address': 'address',
            'looker_recipient': 'looker_recipient',
            'type': 'type',
            'parameters': 'parameters',
            'secret_parameters': 'secret_parameters',
            'can': 'can'
        }

        self._id = None
        self._scheduled_plan_id = None
        self._format = None
        self._apply_formatting = None
        self._address = None
        self._looker_recipient = None
        self._type = None
        self._parameters = None
        self._secret_parameters = None
        self._can = None

    @property
    def id(self):
        """
        Gets the id of this ScheduledPlanDestination.
        Unique Id

        :return: The id of this ScheduledPlanDestination.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ScheduledPlanDestination.
        Unique Id

        :param id: The id of this ScheduledPlanDestination.
        :type: int
        """
        self._id = id

    @property
    def scheduled_plan_id(self):
        """
        Gets the scheduled_plan_id of this ScheduledPlanDestination.
        Id of a scheduled plan you own

        :return: The scheduled_plan_id of this ScheduledPlanDestination.
        :rtype: int
        """
        return self._scheduled_plan_id

    @scheduled_plan_id.setter
    def scheduled_plan_id(self, scheduled_plan_id):
        """
        Sets the scheduled_plan_id of this ScheduledPlanDestination.
        Id of a scheduled plan you own

        :param scheduled_plan_id: The scheduled_plan_id of this ScheduledPlanDestination.
        :type: int
        """
        self._scheduled_plan_id = scheduled_plan_id

    @property
    def format(self):
        """
        Gets the format of this ScheduledPlanDestination.
        Format requested by the given destination (i.e. PDF, etc.)

        :return: The format of this ScheduledPlanDestination.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """
        Sets the format of this ScheduledPlanDestination.
        Format requested by the given destination (i.e. PDF, etc.)

        :param format: The format of this ScheduledPlanDestination.
        :type: str
        """
        self._format = format

    @property
    def apply_formatting(self):
        """
        Gets the apply_formatting of this ScheduledPlanDestination.
        Are values formatted? (containing currency symbols, digit separators, etc.

        :return: The apply_formatting of this ScheduledPlanDestination.
        :rtype: bool
        """
        return self._apply_formatting

    @apply_formatting.setter
    def apply_formatting(self, apply_formatting):
        """
        Sets the apply_formatting of this ScheduledPlanDestination.
        Are values formatted? (containing currency symbols, digit separators, etc.

        :param apply_formatting: The apply_formatting of this ScheduledPlanDestination.
        :type: bool
        """
        self._apply_formatting = apply_formatting

    @property
    def address(self):
        """
        Gets the address of this ScheduledPlanDestination.
        Address for recipient. For email e.g. 'user@example.com'. For webhooks e.g. 'https://domain/path'. For Amazon S3 e.g. 's3://bucket-name/path/'. For SFTP e.g. 'sftp://host-name/path/'. 

        :return: The address of this ScheduledPlanDestination.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this ScheduledPlanDestination.
        Address for recipient. For email e.g. 'user@example.com'. For webhooks e.g. 'https://domain/path'. For Amazon S3 e.g. 's3://bucket-name/path/'. For SFTP e.g. 'sftp://host-name/path/'. 

        :param address: The address of this ScheduledPlanDestination.
        :type: str
        """
        self._address = address

    @property
    def looker_recipient(self):
        """
        Gets the looker_recipient of this ScheduledPlanDestination.
        Whether the recipient is a Looker user on the current instance (only applicable for email recipients)

        :return: The looker_recipient of this ScheduledPlanDestination.
        :rtype: bool
        """
        return self._looker_recipient

    @looker_recipient.setter
    def looker_recipient(self, looker_recipient):
        """
        Sets the looker_recipient of this ScheduledPlanDestination.
        Whether the recipient is a Looker user on the current instance (only applicable for email recipients)

        :param looker_recipient: The looker_recipient of this ScheduledPlanDestination.
        :type: bool
        """
        self._looker_recipient = looker_recipient

    @property
    def type(self):
        """
        Gets the type of this ScheduledPlanDestination.
        Type of the address ('email', 'webhook', 's3', or 'sftp')

        :return: The type of this ScheduledPlanDestination.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ScheduledPlanDestination.
        Type of the address ('email', 'webhook', 's3', or 'sftp')

        :param type: The type of this ScheduledPlanDestination.
        :type: str
        """
        self._type = type

    @property
    def parameters(self):
        """
        Gets the parameters of this ScheduledPlanDestination.
        JSON object containing parameters for external scheduling. For Amazon S3, this requires keys and values for access_key_id and region. For SFTP, this requires a key and value for username.

        :return: The parameters of this ScheduledPlanDestination.
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this ScheduledPlanDestination.
        JSON object containing parameters for external scheduling. For Amazon S3, this requires keys and values for access_key_id and region. For SFTP, this requires a key and value for username.

        :param parameters: The parameters of this ScheduledPlanDestination.
        :type: str
        """
        self._parameters = parameters

    @property
    def secret_parameters(self):
        """
        Gets the secret_parameters of this ScheduledPlanDestination.
        (Write-only) JSON object containing secret parameters for external scheduling. For Amazon S3, this requires a key and value for secret_access_key. For SFTP, this requires a key and value for password.

        :return: The secret_parameters of this ScheduledPlanDestination.
        :rtype: str
        """
        return self._secret_parameters

    @secret_parameters.setter
    def secret_parameters(self, secret_parameters):
        """
        Sets the secret_parameters of this ScheduledPlanDestination.
        (Write-only) JSON object containing secret parameters for external scheduling. For Amazon S3, this requires a key and value for secret_access_key. For SFTP, this requires a key and value for password.

        :param secret_parameters: The secret_parameters of this ScheduledPlanDestination.
        :type: str
        """
        self._secret_parameters = secret_parameters

    @property
    def can(self):
        """
        Gets the can of this ScheduledPlanDestination.
        Operations the current user is able to perform on this object

        :return: The can of this ScheduledPlanDestination.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this ScheduledPlanDestination.
        Operations the current user is able to perform on this object

        :param can: The can of this ScheduledPlanDestination.
        :type: dict(str, bool)
        """
        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

