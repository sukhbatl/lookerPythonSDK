# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class DialectInfoOptions(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DialectInfoOptions - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'timezone': 'bool',
            'schema': 'bool',
            'ssl': 'bool',
            'auth': 'bool',
            'host': 'bool',
            'tmp_table': 'bool',
            'project_name': 'bool',
            'oauth_credentials': 'bool',
            'additional_params': 'bool',
            'username_required': 'bool',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'timezone': 'timezone',
            'schema': 'schema',
            'ssl': 'ssl',
            'auth': 'auth',
            'host': 'host',
            'tmp_table': 'tmp_table',
            'project_name': 'project_name',
            'oauth_credentials': 'oauth_credentials',
            'additional_params': 'additional_params',
            'username_required': 'username_required',
            'can': 'can'
        }

        self._timezone = None
        self._schema = None
        self._ssl = None
        self._auth = None
        self._host = None
        self._tmp_table = None
        self._project_name = None
        self._oauth_credentials = None
        self._additional_params = None
        self._username_required = None
        self._can = None

    @property
    def timezone(self):
        """
        Gets the timezone of this DialectInfoOptions.
        Has timezone support

        :return: The timezone of this DialectInfoOptions.
        :rtype: bool
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this DialectInfoOptions.
        Has timezone support

        :param timezone: The timezone of this DialectInfoOptions.
        :type: bool
        """
        self._timezone = timezone

    @property
    def schema(self):
        """
        Gets the schema of this DialectInfoOptions.
        Has schema support

        :return: The schema of this DialectInfoOptions.
        :rtype: bool
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """
        Sets the schema of this DialectInfoOptions.
        Has schema support

        :param schema: The schema of this DialectInfoOptions.
        :type: bool
        """
        self._schema = schema

    @property
    def ssl(self):
        """
        Gets the ssl of this DialectInfoOptions.
        Has SSL support

        :return: The ssl of this DialectInfoOptions.
        :rtype: bool
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """
        Sets the ssl of this DialectInfoOptions.
        Has SSL support

        :param ssl: The ssl of this DialectInfoOptions.
        :type: bool
        """
        self._ssl = ssl

    @property
    def auth(self):
        """
        Gets the auth of this DialectInfoOptions.
        Has auth support

        :return: The auth of this DialectInfoOptions.
        :rtype: bool
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """
        Sets the auth of this DialectInfoOptions.
        Has auth support

        :param auth: The auth of this DialectInfoOptions.
        :type: bool
        """
        self._auth = auth

    @property
    def host(self):
        """
        Gets the host of this DialectInfoOptions.
        Has host support

        :return: The host of this DialectInfoOptions.
        :rtype: bool
        """
        return self._host

    @host.setter
    def host(self, host):
        """
        Sets the host of this DialectInfoOptions.
        Has host support

        :param host: The host of this DialectInfoOptions.
        :type: bool
        """
        self._host = host

    @property
    def tmp_table(self):
        """
        Gets the tmp_table of this DialectInfoOptions.
        Has tmp table support

        :return: The tmp_table of this DialectInfoOptions.
        :rtype: bool
        """
        return self._tmp_table

    @tmp_table.setter
    def tmp_table(self, tmp_table):
        """
        Sets the tmp_table of this DialectInfoOptions.
        Has tmp table support

        :param tmp_table: The tmp_table of this DialectInfoOptions.
        :type: bool
        """
        self._tmp_table = tmp_table

    @property
    def project_name(self):
        """
        Gets the project_name of this DialectInfoOptions.
        Has project name support

        :return: The project_name of this DialectInfoOptions.
        :rtype: bool
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """
        Sets the project_name of this DialectInfoOptions.
        Has project name support

        :param project_name: The project_name of this DialectInfoOptions.
        :type: bool
        """
        self._project_name = project_name

    @property
    def oauth_credentials(self):
        """
        Gets the oauth_credentials of this DialectInfoOptions.
        Has OAuth support

        :return: The oauth_credentials of this DialectInfoOptions.
        :rtype: bool
        """
        return self._oauth_credentials

    @oauth_credentials.setter
    def oauth_credentials(self, oauth_credentials):
        """
        Sets the oauth_credentials of this DialectInfoOptions.
        Has OAuth support

        :param oauth_credentials: The oauth_credentials of this DialectInfoOptions.
        :type: bool
        """
        self._oauth_credentials = oauth_credentials

    @property
    def additional_params(self):
        """
        Gets the additional_params of this DialectInfoOptions.
        Has additional params support

        :return: The additional_params of this DialectInfoOptions.
        :rtype: bool
        """
        return self._additional_params

    @additional_params.setter
    def additional_params(self, additional_params):
        """
        Sets the additional_params of this DialectInfoOptions.
        Has additional params support

        :param additional_params: The additional_params of this DialectInfoOptions.
        :type: bool
        """
        self._additional_params = additional_params

    @property
    def username_required(self):
        """
        Gets the username_required of this DialectInfoOptions.
        Username is required

        :return: The username_required of this DialectInfoOptions.
        :rtype: bool
        """
        return self._username_required

    @username_required.setter
    def username_required(self, username_required):
        """
        Sets the username_required of this DialectInfoOptions.
        Username is required

        :param username_required: The username_required of this DialectInfoOptions.
        :type: bool
        """
        self._username_required = username_required

    @property
    def can(self):
        """
        Gets the can of this DialectInfoOptions.
        Operations the current user is able to perform on this object

        :return: The can of this DialectInfoOptions.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this DialectInfoOptions.
        Operations the current user is able to perform on this object

        :param can: The can of this DialectInfoOptions.
        :type: dict(str, bool)
        """
        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

