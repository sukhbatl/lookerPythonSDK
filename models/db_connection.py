# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class DBConnection(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DBConnection - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'host': 'str',
            'port': 'str',
            'username': 'str',
            'password': 'str',
            'certificate': 'str',
            'database': 'str',
            'db_timezone': 'str',
            'query_timezone': 'str',
            'schema': 'str',
            'max_connections': 'int',
            'ssl': 'bool',
            'verify_ssl': 'bool',
            'tmp_db_name': 'str',
            'jdbc_additional_params': 'str',
            'pool_timeout': 'int',
            'dialect': 'Dialect',
            'dialect_name': 'str',
            'snippets': 'list[Snippet]',
            'created_at': 'str',
            'user_id': 'str',
            'example': 'bool',
            'user_db_credentials': 'bool',
            'user_attribute_fields': 'list[str]',
            'maintenance_cron': 'str',
            'last_regen_at': 'str',
            'last_reap_at': 'str',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'name': 'name',
            'host': 'host',
            'port': 'port',
            'username': 'username',
            'password': 'password',
            'certificate': 'certificate',
            'database': 'database',
            'db_timezone': 'db_timezone',
            'query_timezone': 'query_timezone',
            'schema': 'schema',
            'max_connections': 'max_connections',
            'ssl': 'ssl',
            'verify_ssl': 'verify_ssl',
            'tmp_db_name': 'tmp_db_name',
            'jdbc_additional_params': 'jdbc_additional_params',
            'pool_timeout': 'pool_timeout',
            'dialect': 'dialect',
            'dialect_name': 'dialect_name',
            'snippets': 'snippets',
            'created_at': 'created_at',
            'user_id': 'user_id',
            'example': 'example',
            'user_db_credentials': 'user_db_credentials',
            'user_attribute_fields': 'user_attribute_fields',
            'maintenance_cron': 'maintenance_cron',
            'last_regen_at': 'last_regen_at',
            'last_reap_at': 'last_reap_at',
            'can': 'can'
        }

        self._name = None
        self._host = None
        self._port = None
        self._username = None
        self._password = None
        self._certificate = None
        self._database = None
        self._db_timezone = None
        self._query_timezone = None
        self._schema = None
        self._max_connections = None
        self._ssl = None
        self._verify_ssl = None
        self._tmp_db_name = None
        self._jdbc_additional_params = None
        self._pool_timeout = None
        self._dialect = None
        self._dialect_name = None
        self._snippets = None
        self._created_at = None
        self._user_id = None
        self._example = None
        self._user_db_credentials = None
        self._user_attribute_fields = None
        self._maintenance_cron = None
        self._last_regen_at = None
        self._last_reap_at = None
        self._can = None

    @property
    def name(self):
        """
        Gets the name of this DBConnection.
        Name of the connection. Also used as the unique identifier

        :return: The name of this DBConnection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DBConnection.
        Name of the connection. Also used as the unique identifier

        :param name: The name of this DBConnection.
        :type: str
        """
        self._name = name

    @property
    def host(self):
        """
        Gets the host of this DBConnection.
        Host name/address of server

        :return: The host of this DBConnection.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """
        Sets the host of this DBConnection.
        Host name/address of server

        :param host: The host of this DBConnection.
        :type: str
        """
        self._host = host

    @property
    def port(self):
        """
        Gets the port of this DBConnection.
        Port number on server

        :return: The port of this DBConnection.
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """
        Sets the port of this DBConnection.
        Port number on server

        :param port: The port of this DBConnection.
        :type: str
        """
        self._port = port

    @property
    def username(self):
        """
        Gets the username of this DBConnection.
        Username for server authentication

        :return: The username of this DBConnection.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this DBConnection.
        Username for server authentication

        :param username: The username of this DBConnection.
        :type: str
        """
        self._username = username

    @property
    def password(self):
        """
        Gets the password of this DBConnection.
        (Write-only) Password for server authentication

        :return: The password of this DBConnection.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this DBConnection.
        (Write-only) Password for server authentication

        :param password: The password of this DBConnection.
        :type: str
        """
        self._password = password

    @property
    def certificate(self):
        """
        Gets the certificate of this DBConnection.
        (Write-only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).

        :return: The certificate of this DBConnection.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """
        Sets the certificate of this DBConnection.
        (Write-only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).

        :param certificate: The certificate of this DBConnection.
        :type: str
        """
        self._certificate = certificate

    @property
    def database(self):
        """
        Gets the database of this DBConnection.
        Database name

        :return: The database of this DBConnection.
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """
        Sets the database of this DBConnection.
        Database name

        :param database: The database of this DBConnection.
        :type: str
        """
        self._database = database

    @property
    def db_timezone(self):
        """
        Gets the db_timezone of this DBConnection.
        Time zone of database

        :return: The db_timezone of this DBConnection.
        :rtype: str
        """
        return self._db_timezone

    @db_timezone.setter
    def db_timezone(self, db_timezone):
        """
        Sets the db_timezone of this DBConnection.
        Time zone of database

        :param db_timezone: The db_timezone of this DBConnection.
        :type: str
        """
        self._db_timezone = db_timezone

    @property
    def query_timezone(self):
        """
        Gets the query_timezone of this DBConnection.
        Timezone to use in queries

        :return: The query_timezone of this DBConnection.
        :rtype: str
        """
        return self._query_timezone

    @query_timezone.setter
    def query_timezone(self, query_timezone):
        """
        Sets the query_timezone of this DBConnection.
        Timezone to use in queries

        :param query_timezone: The query_timezone of this DBConnection.
        :type: str
        """
        self._query_timezone = query_timezone

    @property
    def schema(self):
        """
        Gets the schema of this DBConnection.
        Scheme name

        :return: The schema of this DBConnection.
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """
        Sets the schema of this DBConnection.
        Scheme name

        :param schema: The schema of this DBConnection.
        :type: str
        """
        self._schema = schema

    @property
    def max_connections(self):
        """
        Gets the max_connections of this DBConnection.
        Maximum number of concurrent connection to use

        :return: The max_connections of this DBConnection.
        :rtype: int
        """
        return self._max_connections

    @max_connections.setter
    def max_connections(self, max_connections):
        """
        Sets the max_connections of this DBConnection.
        Maximum number of concurrent connection to use

        :param max_connections: The max_connections of this DBConnection.
        :type: int
        """
        self._max_connections = max_connections

    @property
    def ssl(self):
        """
        Gets the ssl of this DBConnection.
        Use SSL/TLS when connecting to server

        :return: The ssl of this DBConnection.
        :rtype: bool
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """
        Sets the ssl of this DBConnection.
        Use SSL/TLS when connecting to server

        :param ssl: The ssl of this DBConnection.
        :type: bool
        """
        self._ssl = ssl

    @property
    def verify_ssl(self):
        """
        Gets the verify_ssl of this DBConnection.
        Verify the SSL

        :return: The verify_ssl of this DBConnection.
        :rtype: bool
        """
        return self._verify_ssl

    @verify_ssl.setter
    def verify_ssl(self, verify_ssl):
        """
        Sets the verify_ssl of this DBConnection.
        Verify the SSL

        :param verify_ssl: The verify_ssl of this DBConnection.
        :type: bool
        """
        self._verify_ssl = verify_ssl

    @property
    def tmp_db_name(self):
        """
        Gets the tmp_db_name of this DBConnection.
        Name of temporary database (if used)

        :return: The tmp_db_name of this DBConnection.
        :rtype: str
        """
        return self._tmp_db_name

    @tmp_db_name.setter
    def tmp_db_name(self, tmp_db_name):
        """
        Sets the tmp_db_name of this DBConnection.
        Name of temporary database (if used)

        :param tmp_db_name: The tmp_db_name of this DBConnection.
        :type: str
        """
        self._tmp_db_name = tmp_db_name

    @property
    def jdbc_additional_params(self):
        """
        Gets the jdbc_additional_params of this DBConnection.
        Additional params to add to JDBC connection string

        :return: The jdbc_additional_params of this DBConnection.
        :rtype: str
        """
        return self._jdbc_additional_params

    @jdbc_additional_params.setter
    def jdbc_additional_params(self, jdbc_additional_params):
        """
        Sets the jdbc_additional_params of this DBConnection.
        Additional params to add to JDBC connection string

        :param jdbc_additional_params: The jdbc_additional_params of this DBConnection.
        :type: str
        """
        self._jdbc_additional_params = jdbc_additional_params

    @property
    def pool_timeout(self):
        """
        Gets the pool_timeout of this DBConnection.
        Pool Timeout

        :return: The pool_timeout of this DBConnection.
        :rtype: int
        """
        return self._pool_timeout

    @pool_timeout.setter
    def pool_timeout(self, pool_timeout):
        """
        Sets the pool_timeout of this DBConnection.
        Pool Timeout

        :param pool_timeout: The pool_timeout of this DBConnection.
        :type: int
        """
        self._pool_timeout = pool_timeout

    @property
    def dialect(self):
        """
        Gets the dialect of this DBConnection.
        (Read-only) SQL Dialect details

        :return: The dialect of this DBConnection.
        :rtype: Dialect
        """
        return self._dialect

    @dialect.setter
    def dialect(self, dialect):
        """
        Sets the dialect of this DBConnection.
        (Read-only) SQL Dialect details

        :param dialect: The dialect of this DBConnection.
        :type: Dialect
        """
        self._dialect = dialect

    @property
    def dialect_name(self):
        """
        Gets the dialect_name of this DBConnection.
        (Read/Write) SQL Dialect name

        :return: The dialect_name of this DBConnection.
        :rtype: str
        """
        return self._dialect_name

    @dialect_name.setter
    def dialect_name(self, dialect_name):
        """
        Sets the dialect_name of this DBConnection.
        (Read/Write) SQL Dialect name

        :param dialect_name: The dialect_name of this DBConnection.
        :type: str
        """
        self._dialect_name = dialect_name

    @property
    def snippets(self):
        """
        Gets the snippets of this DBConnection.
        SQL Runner snippets for this connection

        :return: The snippets of this DBConnection.
        :rtype: list[Snippet]
        """
        return self._snippets

    @snippets.setter
    def snippets(self, snippets):
        """
        Sets the snippets of this DBConnection.
        SQL Runner snippets for this connection

        :param snippets: The snippets of this DBConnection.
        :type: list[Snippet]
        """
        self._snippets = snippets

    @property
    def created_at(self):
        """
        Gets the created_at of this DBConnection.
        Creation date for this connection

        :return: The created_at of this DBConnection.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this DBConnection.
        Creation date for this connection

        :param created_at: The created_at of this DBConnection.
        :type: str
        """
        self._created_at = created_at

    @property
    def user_id(self):
        """
        Gets the user_id of this DBConnection.
        Id of user who last modified this connection configuration

        :return: The user_id of this DBConnection.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this DBConnection.
        Id of user who last modified this connection configuration

        :param user_id: The user_id of this DBConnection.
        :type: str
        """
        self._user_id = user_id

    @property
    def example(self):
        """
        Gets the example of this DBConnection.
        Is this an example connection

        :return: The example of this DBConnection.
        :rtype: bool
        """
        return self._example

    @example.setter
    def example(self, example):
        """
        Sets the example of this DBConnection.
        Is this an example connection

        :param example: The example of this DBConnection.
        :type: bool
        """
        self._example = example

    @property
    def user_db_credentials(self):
        """
        Gets the user_db_credentials of this DBConnection.
        (Limited access feature) Are per user db credentials enabled

        :return: The user_db_credentials of this DBConnection.
        :rtype: bool
        """
        return self._user_db_credentials

    @user_db_credentials.setter
    def user_db_credentials(self, user_db_credentials):
        """
        Sets the user_db_credentials of this DBConnection.
        (Limited access feature) Are per user db credentials enabled

        :param user_db_credentials: The user_db_credentials of this DBConnection.
        :type: bool
        """
        self._user_db_credentials = user_db_credentials

    @property
    def user_attribute_fields(self):
        """
        Gets the user_attribute_fields of this DBConnection.
        Fields whose values map to user attribute names

        :return: The user_attribute_fields of this DBConnection.
        :rtype: list[str]
        """
        return self._user_attribute_fields

    @user_attribute_fields.setter
    def user_attribute_fields(self, user_attribute_fields):
        """
        Sets the user_attribute_fields of this DBConnection.
        Fields whose values map to user attribute names

        :param user_attribute_fields: The user_attribute_fields of this DBConnection.
        :type: list[str]
        """
        self._user_attribute_fields = user_attribute_fields

    @property
    def maintenance_cron(self):
        """
        Gets the maintenance_cron of this DBConnection.
        Cron string specifying when maintenance such as PDT trigger checks and drops should be performed

        :return: The maintenance_cron of this DBConnection.
        :rtype: str
        """
        return self._maintenance_cron

    @maintenance_cron.setter
    def maintenance_cron(self, maintenance_cron):
        """
        Sets the maintenance_cron of this DBConnection.
        Cron string specifying when maintenance such as PDT trigger checks and drops should be performed

        :param maintenance_cron: The maintenance_cron of this DBConnection.
        :type: str
        """
        self._maintenance_cron = maintenance_cron

    @property
    def last_regen_at(self):
        """
        Gets the last_regen_at of this DBConnection.
        Unix timestamp at start of last completed PDT trigger check process

        :return: The last_regen_at of this DBConnection.
        :rtype: str
        """
        return self._last_regen_at

    @last_regen_at.setter
    def last_regen_at(self, last_regen_at):
        """
        Sets the last_regen_at of this DBConnection.
        Unix timestamp at start of last completed PDT trigger check process

        :param last_regen_at: The last_regen_at of this DBConnection.
        :type: str
        """
        self._last_regen_at = last_regen_at

    @property
    def last_reap_at(self):
        """
        Gets the last_reap_at of this DBConnection.
        Unix timestamp at start of last completed PDT reap process

        :return: The last_reap_at of this DBConnection.
        :rtype: str
        """
        return self._last_reap_at

    @last_reap_at.setter
    def last_reap_at(self, last_reap_at):
        """
        Sets the last_reap_at of this DBConnection.
        Unix timestamp at start of last completed PDT reap process

        :param last_reap_at: The last_reap_at of this DBConnection.
        :type: str
        """
        self._last_reap_at = last_reap_at

    @property
    def can(self):
        """
        Gets the can of this DBConnection.
        Operations the current user is able to perform on this object

        :return: The can of this DBConnection.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this DBConnection.
        Operations the current user is able to perform on this object

        :param can: The can of this DBConnection.
        :type: dict(str, bool)
        """
        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

