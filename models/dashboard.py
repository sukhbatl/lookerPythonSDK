# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Dashboard(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Dashboard - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'content_metadata_id': 'int',
            'view_count': 'int',
            'favorite_count': 'int',
            'user_id': 'int',
            'title': 'str',
            'description': 'str',
            'readonly': 'bool',
            'hidden': 'bool',
            'refresh_interval': 'str',
            'refresh_interval_to_i': 'int',
            'space': 'SpaceBase',
            'load_configuration': 'str',
            'model': 'LookModel',
            'space_id': 'str',
            'dashboard_elements': 'list[DashboardElement]',
            'dashboard_layouts': 'list[DashboardLayout]',
            'dashboard_filters': 'list[DashboardFilter]',
            'last_viewed_at': 'datetime',
            'background_color': 'str',
            'show_title': 'bool',
            'title_color': 'str',
            'show_filters_bar': 'bool',
            'tile_background_color': 'str',
            'tile_text_color': 'str',
            'text_tile_text_color': 'str',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'id': 'id',
            'content_metadata_id': 'content_metadata_id',
            'view_count': 'view_count',
            'favorite_count': 'favorite_count',
            'user_id': 'user_id',
            'title': 'title',
            'description': 'description',
            'readonly': 'readonly',
            'hidden': 'hidden',
            'refresh_interval': 'refresh_interval',
            'refresh_interval_to_i': 'refresh_interval_to_i',
            'space': 'space',
            'load_configuration': 'load_configuration',
            'model': 'model',
            'space_id': 'space_id',
            'dashboard_elements': 'dashboard_elements',
            'dashboard_layouts': 'dashboard_layouts',
            'dashboard_filters': 'dashboard_filters',
            'last_viewed_at': 'last_viewed_at',
            'background_color': 'background_color',
            'show_title': 'show_title',
            'title_color': 'title_color',
            'show_filters_bar': 'show_filters_bar',
            'tile_background_color': 'tile_background_color',
            'tile_text_color': 'tile_text_color',
            'text_tile_text_color': 'text_tile_text_color',
            'can': 'can'
        }

        self._id = None
        self._content_metadata_id = None
        self._view_count = None
        self._favorite_count = None
        self._user_id = None
        self._title = None
        self._description = None
        self._readonly = None
        self._hidden = None
        self._refresh_interval = None
        self._refresh_interval_to_i = None
        self._space = None
        self._load_configuration = None
        self._model = None
        self._space_id = None
        self._dashboard_elements = None
        self._dashboard_layouts = None
        self._dashboard_filters = None
        self._last_viewed_at = None
        self._background_color = None
        self._show_title = None
        self._title_color = None
        self._show_filters_bar = None
        self._tile_background_color = None
        self._tile_text_color = None
        self._text_tile_text_color = None
        self._can = None

    @property
    def id(self):
        """
        Gets the id of this Dashboard.
        Unique Id

        :return: The id of this Dashboard.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Dashboard.
        Unique Id

        :param id: The id of this Dashboard.
        :type: str
        """
        self._id = id

    @property
    def content_metadata_id(self):
        """
        Gets the content_metadata_id of this Dashboard.
        Id of content metadata

        :return: The content_metadata_id of this Dashboard.
        :rtype: int
        """
        return self._content_metadata_id

    @content_metadata_id.setter
    def content_metadata_id(self, content_metadata_id):
        """
        Sets the content_metadata_id of this Dashboard.
        Id of content metadata

        :param content_metadata_id: The content_metadata_id of this Dashboard.
        :type: int
        """
        self._content_metadata_id = content_metadata_id

    @property
    def view_count(self):
        """
        Gets the view_count of this Dashboard.
        Number of times viewed in the Looker web UI

        :return: The view_count of this Dashboard.
        :rtype: int
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """
        Sets the view_count of this Dashboard.
        Number of times viewed in the Looker web UI

        :param view_count: The view_count of this Dashboard.
        :type: int
        """
        self._view_count = view_count

    @property
    def favorite_count(self):
        """
        Gets the favorite_count of this Dashboard.
        Number of times favorited

        :return: The favorite_count of this Dashboard.
        :rtype: int
        """
        return self._favorite_count

    @favorite_count.setter
    def favorite_count(self, favorite_count):
        """
        Sets the favorite_count of this Dashboard.
        Number of times favorited

        :param favorite_count: The favorite_count of this Dashboard.
        :type: int
        """
        self._favorite_count = favorite_count

    @property
    def user_id(self):
        """
        Gets the user_id of this Dashboard.
        Id of User

        :return: The user_id of this Dashboard.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this Dashboard.
        Id of User

        :param user_id: The user_id of this Dashboard.
        :type: int
        """
        self._user_id = user_id

    @property
    def title(self):
        """
        Gets the title of this Dashboard.
        Look Title

        :return: The title of this Dashboard.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this Dashboard.
        Look Title

        :param title: The title of this Dashboard.
        :type: str
        """
        self._title = title

    @property
    def description(self):
        """
        Gets the description of this Dashboard.
        Description

        :return: The description of this Dashboard.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Dashboard.
        Description

        :param description: The description of this Dashboard.
        :type: str
        """
        self._description = description

    @property
    def readonly(self):
        """
        Gets the readonly of this Dashboard.
        Is Read-only

        :return: The readonly of this Dashboard.
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """
        Sets the readonly of this Dashboard.
        Is Read-only

        :param readonly: The readonly of this Dashboard.
        :type: bool
        """
        self._readonly = readonly

    @property
    def hidden(self):
        """
        Gets the hidden of this Dashboard.
        Is Hidden

        :return: The hidden of this Dashboard.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """
        Sets the hidden of this Dashboard.
        Is Hidden

        :param hidden: The hidden of this Dashboard.
        :type: bool
        """
        self._hidden = hidden

    @property
    def refresh_interval(self):
        """
        Gets the refresh_interval of this Dashboard.
        Refresh Interval

        :return: The refresh_interval of this Dashboard.
        :rtype: str
        """
        return self._refresh_interval

    @refresh_interval.setter
    def refresh_interval(self, refresh_interval):
        """
        Sets the refresh_interval of this Dashboard.
        Refresh Interval

        :param refresh_interval: The refresh_interval of this Dashboard.
        :type: str
        """
        self._refresh_interval = refresh_interval

    @property
    def refresh_interval_to_i(self):
        """
        Gets the refresh_interval_to_i of this Dashboard.
        Refresh Interval as Integer

        :return: The refresh_interval_to_i of this Dashboard.
        :rtype: int
        """
        return self._refresh_interval_to_i

    @refresh_interval_to_i.setter
    def refresh_interval_to_i(self, refresh_interval_to_i):
        """
        Sets the refresh_interval_to_i of this Dashboard.
        Refresh Interval as Integer

        :param refresh_interval_to_i: The refresh_interval_to_i of this Dashboard.
        :type: int
        """
        self._refresh_interval_to_i = refresh_interval_to_i

    @property
    def space(self):
        """
        Gets the space of this Dashboard.
        Space

        :return: The space of this Dashboard.
        :rtype: SpaceBase
        """
        return self._space

    @space.setter
    def space(self, space):
        """
        Sets the space of this Dashboard.
        Space

        :param space: The space of this Dashboard.
        :type: SpaceBase
        """
        self._space = space

    @property
    def load_configuration(self):
        """
        Gets the load_configuration of this Dashboard.
        configuration option that governs how dashboard loading will happen.

        :return: The load_configuration of this Dashboard.
        :rtype: str
        """
        return self._load_configuration

    @load_configuration.setter
    def load_configuration(self, load_configuration):
        """
        Sets the load_configuration of this Dashboard.
        configuration option that governs how dashboard loading will happen.

        :param load_configuration: The load_configuration of this Dashboard.
        :type: str
        """
        self._load_configuration = load_configuration

    @property
    def model(self):
        """
        Gets the model of this Dashboard.
        Model

        :return: The model of this Dashboard.
        :rtype: LookModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this Dashboard.
        Model

        :param model: The model of this Dashboard.
        :type: LookModel
        """
        self._model = model

    @property
    def space_id(self):
        """
        Gets the space_id of this Dashboard.
        Id of Space

        :return: The space_id of this Dashboard.
        :rtype: str
        """
        return self._space_id

    @space_id.setter
    def space_id(self, space_id):
        """
        Sets the space_id of this Dashboard.
        Id of Space

        :param space_id: The space_id of this Dashboard.
        :type: str
        """
        self._space_id = space_id

    @property
    def dashboard_elements(self):
        """
        Gets the dashboard_elements of this Dashboard.
        Elements

        :return: The dashboard_elements of this Dashboard.
        :rtype: list[DashboardElement]
        """
        return self._dashboard_elements

    @dashboard_elements.setter
    def dashboard_elements(self, dashboard_elements):
        """
        Sets the dashboard_elements of this Dashboard.
        Elements

        :param dashboard_elements: The dashboard_elements of this Dashboard.
        :type: list[DashboardElement]
        """
        self._dashboard_elements = dashboard_elements

    @property
    def dashboard_layouts(self):
        """
        Gets the dashboard_layouts of this Dashboard.
        Layouts

        :return: The dashboard_layouts of this Dashboard.
        :rtype: list[DashboardLayout]
        """
        return self._dashboard_layouts

    @dashboard_layouts.setter
    def dashboard_layouts(self, dashboard_layouts):
        """
        Sets the dashboard_layouts of this Dashboard.
        Layouts

        :param dashboard_layouts: The dashboard_layouts of this Dashboard.
        :type: list[DashboardLayout]
        """
        self._dashboard_layouts = dashboard_layouts

    @property
    def dashboard_filters(self):
        """
        Gets the dashboard_filters of this Dashboard.
        Filters

        :return: The dashboard_filters of this Dashboard.
        :rtype: list[DashboardFilter]
        """
        return self._dashboard_filters

    @dashboard_filters.setter
    def dashboard_filters(self, dashboard_filters):
        """
        Sets the dashboard_filters of this Dashboard.
        Filters

        :param dashboard_filters: The dashboard_filters of this Dashboard.
        :type: list[DashboardFilter]
        """
        self._dashboard_filters = dashboard_filters

    @property
    def last_viewed_at(self):
        """
        Gets the last_viewed_at of this Dashboard.
        Time last viewed in the Looker web UI

        :return: The last_viewed_at of this Dashboard.
        :rtype: datetime
        """
        return self._last_viewed_at

    @last_viewed_at.setter
    def last_viewed_at(self, last_viewed_at):
        """
        Sets the last_viewed_at of this Dashboard.
        Time last viewed in the Looker web UI

        :param last_viewed_at: The last_viewed_at of this Dashboard.
        :type: datetime
        """
        self._last_viewed_at = last_viewed_at

    @property
    def background_color(self):
        """
        Gets the background_color of this Dashboard.
        Background color

        :return: The background_color of this Dashboard.
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """
        Sets the background_color of this Dashboard.
        Background color

        :param background_color: The background_color of this Dashboard.
        :type: str
        """
        self._background_color = background_color

    @property
    def show_title(self):
        """
        Gets the show_title of this Dashboard.
        Show title

        :return: The show_title of this Dashboard.
        :rtype: bool
        """
        return self._show_title

    @show_title.setter
    def show_title(self, show_title):
        """
        Sets the show_title of this Dashboard.
        Show title

        :param show_title: The show_title of this Dashboard.
        :type: bool
        """
        self._show_title = show_title

    @property
    def title_color(self):
        """
        Gets the title_color of this Dashboard.
        Title color

        :return: The title_color of this Dashboard.
        :rtype: str
        """
        return self._title_color

    @title_color.setter
    def title_color(self, title_color):
        """
        Sets the title_color of this Dashboard.
        Title color

        :param title_color: The title_color of this Dashboard.
        :type: str
        """
        self._title_color = title_color

    @property
    def show_filters_bar(self):
        """
        Gets the show_filters_bar of this Dashboard.
        Show filters bar

        :return: The show_filters_bar of this Dashboard.
        :rtype: bool
        """
        return self._show_filters_bar

    @show_filters_bar.setter
    def show_filters_bar(self, show_filters_bar):
        """
        Sets the show_filters_bar of this Dashboard.
        Show filters bar

        :param show_filters_bar: The show_filters_bar of this Dashboard.
        :type: bool
        """
        self._show_filters_bar = show_filters_bar

    @property
    def tile_background_color(self):
        """
        Gets the tile_background_color of this Dashboard.
        Tile background color

        :return: The tile_background_color of this Dashboard.
        :rtype: str
        """
        return self._tile_background_color

    @tile_background_color.setter
    def tile_background_color(self, tile_background_color):
        """
        Sets the tile_background_color of this Dashboard.
        Tile background color

        :param tile_background_color: The tile_background_color of this Dashboard.
        :type: str
        """
        self._tile_background_color = tile_background_color

    @property
    def tile_text_color(self):
        """
        Gets the tile_text_color of this Dashboard.
        Tile text color

        :return: The tile_text_color of this Dashboard.
        :rtype: str
        """
        return self._tile_text_color

    @tile_text_color.setter
    def tile_text_color(self, tile_text_color):
        """
        Sets the tile_text_color of this Dashboard.
        Tile text color

        :param tile_text_color: The tile_text_color of this Dashboard.
        :type: str
        """
        self._tile_text_color = tile_text_color

    @property
    def text_tile_text_color(self):
        """
        Gets the text_tile_text_color of this Dashboard.
        Color of text on text tiles

        :return: The text_tile_text_color of this Dashboard.
        :rtype: str
        """
        return self._text_tile_text_color

    @text_tile_text_color.setter
    def text_tile_text_color(self, text_tile_text_color):
        """
        Sets the text_tile_text_color of this Dashboard.
        Color of text on text tiles

        :param text_tile_text_color: The text_tile_text_color of this Dashboard.
        :type: str
        """
        self._text_tile_text_color = text_tile_text_color

    @property
    def can(self):
        """
        Gets the can of this Dashboard.
        Operations the current user is able to perform on this object

        :return: The can of this Dashboard.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this Dashboard.
        Operations the current user is able to perform on this object

        :param can: The can of this Dashboard.
        :type: dict(str, bool)
        """
        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

