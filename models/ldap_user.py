# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class LDAPUser(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LDAPUser - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'email': 'str',
            'first_name': 'str',
            'last_name': 'str',
            'ldap_id': 'str',
            'all_emails': 'list[str]',
            'ldap_dn': 'str',
            'roles': 'list[str]',
            'groups': 'list[str]',
            'url': 'str',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'ldap_id': 'ldap_id',
            'all_emails': 'all_emails',
            'ldap_dn': 'ldap_dn',
            'roles': 'roles',
            'groups': 'groups',
            'url': 'url',
            'can': 'can'
        }

        self._email = None
        self._first_name = None
        self._last_name = None
        self._ldap_id = None
        self._all_emails = None
        self._ldap_dn = None
        self._roles = None
        self._groups = None
        self._url = None
        self._can = None

    @property
    def email(self):
        """
        Gets the email of this LDAPUser.
        Primary email address

        :return: The email of this LDAPUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this LDAPUser.
        Primary email address

        :param email: The email of this LDAPUser.
        :type: str
        """
        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this LDAPUser.
        First name

        :return: The first_name of this LDAPUser.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this LDAPUser.
        First name

        :param first_name: The first_name of this LDAPUser.
        :type: str
        """
        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this LDAPUser.
        Last Name

        :return: The last_name of this LDAPUser.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this LDAPUser.
        Last Name

        :param last_name: The last_name of this LDAPUser.
        :type: str
        """
        self._last_name = last_name

    @property
    def ldap_id(self):
        """
        Gets the ldap_id of this LDAPUser.
        LDAP's Unique ID for the user

        :return: The ldap_id of this LDAPUser.
        :rtype: str
        """
        return self._ldap_id

    @ldap_id.setter
    def ldap_id(self, ldap_id):
        """
        Sets the ldap_id of this LDAPUser.
        LDAP's Unique ID for the user

        :param ldap_id: The ldap_id of this LDAPUser.
        :type: str
        """
        self._ldap_id = ldap_id

    @property
    def all_emails(self):
        """
        Gets the all_emails of this LDAPUser.
        Array of user's email addresses and aliases for use in migration

        :return: The all_emails of this LDAPUser.
        :rtype: list[str]
        """
        return self._all_emails

    @all_emails.setter
    def all_emails(self, all_emails):
        """
        Sets the all_emails of this LDAPUser.
        Array of user's email addresses and aliases for use in migration

        :param all_emails: The all_emails of this LDAPUser.
        :type: list[str]
        """
        self._all_emails = all_emails

    @property
    def ldap_dn(self):
        """
        Gets the ldap_dn of this LDAPUser.
        LDAP's distinguished name for the user record

        :return: The ldap_dn of this LDAPUser.
        :rtype: str
        """
        return self._ldap_dn

    @ldap_dn.setter
    def ldap_dn(self, ldap_dn):
        """
        Sets the ldap_dn of this LDAPUser.
        LDAP's distinguished name for the user record

        :param ldap_dn: The ldap_dn of this LDAPUser.
        :type: str
        """
        self._ldap_dn = ldap_dn

    @property
    def roles(self):
        """
        Gets the roles of this LDAPUser.
        Array of user's roles (role names only)

        :return: The roles of this LDAPUser.
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this LDAPUser.
        Array of user's roles (role names only)

        :param roles: The roles of this LDAPUser.
        :type: list[str]
        """
        self._roles = roles

    @property
    def groups(self):
        """
        Gets the groups of this LDAPUser.
        Array of user's groups (group names only)

        :return: The groups of this LDAPUser.
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """
        Sets the groups of this LDAPUser.
        Array of user's groups (group names only)

        :param groups: The groups of this LDAPUser.
        :type: list[str]
        """
        self._groups = groups

    @property
    def url(self):
        """
        Gets the url of this LDAPUser.
        Link to ldap config

        :return: The url of this LDAPUser.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this LDAPUser.
        Link to ldap config

        :param url: The url of this LDAPUser.
        :type: str
        """
        self._url = url

    @property
    def can(self):
        """
        Gets the can of this LDAPUser.
        Operations the current user is able to perform on this object

        :return: The can of this LDAPUser.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this LDAPUser.
        Operations the current user is able to perform on this object

        :param can: The can of this LDAPUser.
        :type: dict(str, bool)
        """
        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

