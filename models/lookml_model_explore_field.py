# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class LookmlModelExploreField(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LookmlModelExploreField - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'description': 'str',
            'label': 'str',
            'label_short': 'str',
            'view_label': 'str',
            'align': 'str',
            'default_filter_value': 'str',
            'hidden': 'bool',
            'view': 'str',
            'type': 'str',
            'is_numeric': 'bool',
            'scope': 'str',
            'project_name': 'str',
            'source_file': 'str',
            'can_filter': 'bool',
            'requires_refresh_on_sort': 'bool',
            'sortable': 'bool',
            'value_format': 'str',
            'field_group_label': 'str',
            'field_group_variant': 'str',
            'suggest_explore': 'str',
            'suggest_dimension': 'str',
            'enumerations': 'list[LookmlModelExploreFieldEnumeration]',
            'suggestable': 'bool',
            'sql': 'str',
            'sql_case': 'list[LookmlModelExploreFieldSqlCase]',
            'user_attribute_filter_types': 'list[str]',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'label': 'label',
            'label_short': 'label_short',
            'view_label': 'view_label',
            'align': 'align',
            'default_filter_value': 'default_filter_value',
            'hidden': 'hidden',
            'view': 'view',
            'type': 'type',
            'is_numeric': 'is_numeric',
            'scope': 'scope',
            'project_name': 'project_name',
            'source_file': 'source_file',
            'can_filter': 'can_filter',
            'requires_refresh_on_sort': 'requires_refresh_on_sort',
            'sortable': 'sortable',
            'value_format': 'value_format',
            'field_group_label': 'field_group_label',
            'field_group_variant': 'field_group_variant',
            'suggest_explore': 'suggest_explore',
            'suggest_dimension': 'suggest_dimension',
            'enumerations': 'enumerations',
            'suggestable': 'suggestable',
            'sql': 'sql',
            'sql_case': 'sql_case',
            'user_attribute_filter_types': 'user_attribute_filter_types',
            'can': 'can'
        }

        self._name = None
        self._description = None
        self._label = None
        self._label_short = None
        self._view_label = None
        self._align = None
        self._default_filter_value = None
        self._hidden = None
        self._view = None
        self._type = None
        self._is_numeric = None
        self._scope = None
        self._project_name = None
        self._source_file = None
        self._can_filter = None
        self._requires_refresh_on_sort = None
        self._sortable = None
        self._value_format = None
        self._field_group_label = None
        self._field_group_variant = None
        self._suggest_explore = None
        self._suggest_dimension = None
        self._enumerations = None
        self._suggestable = None
        self._sql = None
        self._sql_case = None
        self._user_attribute_filter_types = None
        self._can = None

    @property
    def name(self):
        """
        Gets the name of this LookmlModelExploreField.
        Name

        :return: The name of this LookmlModelExploreField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LookmlModelExploreField.
        Name

        :param name: The name of this LookmlModelExploreField.
        :type: str
        """
        self._name = name

    @property
    def description(self):
        """
        Gets the description of this LookmlModelExploreField.
        Description

        :return: The description of this LookmlModelExploreField.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this LookmlModelExploreField.
        Description

        :param description: The description of this LookmlModelExploreField.
        :type: str
        """
        self._description = description

    @property
    def label(self):
        """
        Gets the label of this LookmlModelExploreField.
        Label

        :return: The label of this LookmlModelExploreField.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this LookmlModelExploreField.
        Label

        :param label: The label of this LookmlModelExploreField.
        :type: str
        """
        self._label = label

    @property
    def label_short(self):
        """
        Gets the label_short of this LookmlModelExploreField.
        Short version of label

        :return: The label_short of this LookmlModelExploreField.
        :rtype: str
        """
        return self._label_short

    @label_short.setter
    def label_short(self, label_short):
        """
        Sets the label_short of this LookmlModelExploreField.
        Short version of label

        :param label_short: The label_short of this LookmlModelExploreField.
        :type: str
        """
        self._label_short = label_short

    @property
    def view_label(self):
        """
        Gets the view_label of this LookmlModelExploreField.
        Label of view

        :return: The view_label of this LookmlModelExploreField.
        :rtype: str
        """
        return self._view_label

    @view_label.setter
    def view_label(self, view_label):
        """
        Sets the view_label of this LookmlModelExploreField.
        Label of view

        :param view_label: The view_label of this LookmlModelExploreField.
        :type: str
        """
        self._view_label = view_label

    @property
    def align(self):
        """
        Gets the align of this LookmlModelExploreField.
        Alignment type

        :return: The align of this LookmlModelExploreField.
        :rtype: str
        """
        return self._align

    @align.setter
    def align(self, align):
        """
        Sets the align of this LookmlModelExploreField.
        Alignment type

        :param align: The align of this LookmlModelExploreField.
        :type: str
        """
        self._align = align

    @property
    def default_filter_value(self):
        """
        Gets the default_filter_value of this LookmlModelExploreField.
        Default filter value

        :return: The default_filter_value of this LookmlModelExploreField.
        :rtype: str
        """
        return self._default_filter_value

    @default_filter_value.setter
    def default_filter_value(self, default_filter_value):
        """
        Sets the default_filter_value of this LookmlModelExploreField.
        Default filter value

        :param default_filter_value: The default_filter_value of this LookmlModelExploreField.
        :type: str
        """
        self._default_filter_value = default_filter_value

    @property
    def hidden(self):
        """
        Gets the hidden of this LookmlModelExploreField.
        Is hidden

        :return: The hidden of this LookmlModelExploreField.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """
        Sets the hidden of this LookmlModelExploreField.
        Is hidden

        :param hidden: The hidden of this LookmlModelExploreField.
        :type: bool
        """
        self._hidden = hidden

    @property
    def view(self):
        """
        Gets the view of this LookmlModelExploreField.
        View name

        :return: The view of this LookmlModelExploreField.
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """
        Sets the view of this LookmlModelExploreField.
        View name

        :param view: The view of this LookmlModelExploreField.
        :type: str
        """
        self._view = view

    @property
    def type(self):
        """
        Gets the type of this LookmlModelExploreField.
        Type of field

        :return: The type of this LookmlModelExploreField.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this LookmlModelExploreField.
        Type of field

        :param type: The type of this LookmlModelExploreField.
        :type: str
        """
        self._type = type

    @property
    def is_numeric(self):
        """
        Gets the is_numeric of this LookmlModelExploreField.
        Is numeric

        :return: The is_numeric of this LookmlModelExploreField.
        :rtype: bool
        """
        return self._is_numeric

    @is_numeric.setter
    def is_numeric(self, is_numeric):
        """
        Sets the is_numeric of this LookmlModelExploreField.
        Is numeric

        :param is_numeric: The is_numeric of this LookmlModelExploreField.
        :type: bool
        """
        self._is_numeric = is_numeric

    @property
    def scope(self):
        """
        Gets the scope of this LookmlModelExploreField.
        Scope

        :return: The scope of this LookmlModelExploreField.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """
        Sets the scope of this LookmlModelExploreField.
        Scope

        :param scope: The scope of this LookmlModelExploreField.
        :type: str
        """
        self._scope = scope

    @property
    def project_name(self):
        """
        Gets the project_name of this LookmlModelExploreField.
        Project name

        :return: The project_name of this LookmlModelExploreField.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """
        Sets the project_name of this LookmlModelExploreField.
        Project name

        :param project_name: The project_name of this LookmlModelExploreField.
        :type: str
        """
        self._project_name = project_name

    @property
    def source_file(self):
        """
        Gets the source_file of this LookmlModelExploreField.
        Source file

        :return: The source_file of this LookmlModelExploreField.
        :rtype: str
        """
        return self._source_file

    @source_file.setter
    def source_file(self, source_file):
        """
        Sets the source_file of this LookmlModelExploreField.
        Source file

        :param source_file: The source_file of this LookmlModelExploreField.
        :type: str
        """
        self._source_file = source_file

    @property
    def can_filter(self):
        """
        Gets the can_filter of this LookmlModelExploreField.
        Can filter

        :return: The can_filter of this LookmlModelExploreField.
        :rtype: bool
        """
        return self._can_filter

    @can_filter.setter
    def can_filter(self, can_filter):
        """
        Sets the can_filter of this LookmlModelExploreField.
        Can filter

        :param can_filter: The can_filter of this LookmlModelExploreField.
        :type: bool
        """
        self._can_filter = can_filter

    @property
    def requires_refresh_on_sort(self):
        """
        Gets the requires_refresh_on_sort of this LookmlModelExploreField.
        Requires refres on sort

        :return: The requires_refresh_on_sort of this LookmlModelExploreField.
        :rtype: bool
        """
        return self._requires_refresh_on_sort

    @requires_refresh_on_sort.setter
    def requires_refresh_on_sort(self, requires_refresh_on_sort):
        """
        Sets the requires_refresh_on_sort of this LookmlModelExploreField.
        Requires refres on sort

        :param requires_refresh_on_sort: The requires_refresh_on_sort of this LookmlModelExploreField.
        :type: bool
        """
        self._requires_refresh_on_sort = requires_refresh_on_sort

    @property
    def sortable(self):
        """
        Gets the sortable of this LookmlModelExploreField.
        Is sortable

        :return: The sortable of this LookmlModelExploreField.
        :rtype: bool
        """
        return self._sortable

    @sortable.setter
    def sortable(self, sortable):
        """
        Sets the sortable of this LookmlModelExploreField.
        Is sortable

        :param sortable: The sortable of this LookmlModelExploreField.
        :type: bool
        """
        self._sortable = sortable

    @property
    def value_format(self):
        """
        Gets the value_format of this LookmlModelExploreField.
        Value format

        :return: The value_format of this LookmlModelExploreField.
        :rtype: str
        """
        return self._value_format

    @value_format.setter
    def value_format(self, value_format):
        """
        Sets the value_format of this LookmlModelExploreField.
        Value format

        :param value_format: The value_format of this LookmlModelExploreField.
        :type: str
        """
        self._value_format = value_format

    @property
    def field_group_label(self):
        """
        Gets the field_group_label of this LookmlModelExploreField.
        Field group label

        :return: The field_group_label of this LookmlModelExploreField.
        :rtype: str
        """
        return self._field_group_label

    @field_group_label.setter
    def field_group_label(self, field_group_label):
        """
        Sets the field_group_label of this LookmlModelExploreField.
        Field group label

        :param field_group_label: The field_group_label of this LookmlModelExploreField.
        :type: str
        """
        self._field_group_label = field_group_label

    @property
    def field_group_variant(self):
        """
        Gets the field_group_variant of this LookmlModelExploreField.
        Field Group variant

        :return: The field_group_variant of this LookmlModelExploreField.
        :rtype: str
        """
        return self._field_group_variant

    @field_group_variant.setter
    def field_group_variant(self, field_group_variant):
        """
        Sets the field_group_variant of this LookmlModelExploreField.
        Field Group variant

        :param field_group_variant: The field_group_variant of this LookmlModelExploreField.
        :type: str
        """
        self._field_group_variant = field_group_variant

    @property
    def suggest_explore(self):
        """
        Gets the suggest_explore of this LookmlModelExploreField.
        Explore for suggest

        :return: The suggest_explore of this LookmlModelExploreField.
        :rtype: str
        """
        return self._suggest_explore

    @suggest_explore.setter
    def suggest_explore(self, suggest_explore):
        """
        Sets the suggest_explore of this LookmlModelExploreField.
        Explore for suggest

        :param suggest_explore: The suggest_explore of this LookmlModelExploreField.
        :type: str
        """
        self._suggest_explore = suggest_explore

    @property
    def suggest_dimension(self):
        """
        Gets the suggest_dimension of this LookmlModelExploreField.
        Dimension for suggest

        :return: The suggest_dimension of this LookmlModelExploreField.
        :rtype: str
        """
        return self._suggest_dimension

    @suggest_dimension.setter
    def suggest_dimension(self, suggest_dimension):
        """
        Sets the suggest_dimension of this LookmlModelExploreField.
        Dimension for suggest

        :param suggest_dimension: The suggest_dimension of this LookmlModelExploreField.
        :type: str
        """
        self._suggest_dimension = suggest_dimension

    @property
    def enumerations(self):
        """
        Gets the enumerations of this LookmlModelExploreField.
        Array of enumerations

        :return: The enumerations of this LookmlModelExploreField.
        :rtype: list[LookmlModelExploreFieldEnumeration]
        """
        return self._enumerations

    @enumerations.setter
    def enumerations(self, enumerations):
        """
        Sets the enumerations of this LookmlModelExploreField.
        Array of enumerations

        :param enumerations: The enumerations of this LookmlModelExploreField.
        :type: list[LookmlModelExploreFieldEnumeration]
        """
        self._enumerations = enumerations

    @property
    def suggestable(self):
        """
        Gets the suggestable of this LookmlModelExploreField.
        Is suggestable

        :return: The suggestable of this LookmlModelExploreField.
        :rtype: bool
        """
        return self._suggestable

    @suggestable.setter
    def suggestable(self, suggestable):
        """
        Sets the suggestable of this LookmlModelExploreField.
        Is suggestable

        :param suggestable: The suggestable of this LookmlModelExploreField.
        :type: bool
        """
        self._suggestable = suggestable

    @property
    def sql(self):
        """
        Gets the sql of this LookmlModelExploreField.
        SQL expression

        :return: The sql of this LookmlModelExploreField.
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """
        Sets the sql of this LookmlModelExploreField.
        SQL expression

        :param sql: The sql of this LookmlModelExploreField.
        :type: str
        """
        self._sql = sql

    @property
    def sql_case(self):
        """
        Gets the sql_case of this LookmlModelExploreField.
        An array of conditions and values that make up a SQL Case expression

        :return: The sql_case of this LookmlModelExploreField.
        :rtype: list[LookmlModelExploreFieldSqlCase]
        """
        return self._sql_case

    @sql_case.setter
    def sql_case(self, sql_case):
        """
        Sets the sql_case of this LookmlModelExploreField.
        An array of conditions and values that make up a SQL Case expression

        :param sql_case: The sql_case of this LookmlModelExploreField.
        :type: list[LookmlModelExploreFieldSqlCase]
        """
        self._sql_case = sql_case

    @property
    def user_attribute_filter_types(self):
        """
        Gets the user_attribute_filter_types of this LookmlModelExploreField.
        Valid user attributes types for filtering

        :return: The user_attribute_filter_types of this LookmlModelExploreField.
        :rtype: list[str]
        """
        return self._user_attribute_filter_types

    @user_attribute_filter_types.setter
    def user_attribute_filter_types(self, user_attribute_filter_types):
        """
        Sets the user_attribute_filter_types of this LookmlModelExploreField.
        Valid user attributes types for filtering

        :param user_attribute_filter_types: The user_attribute_filter_types of this LookmlModelExploreField.
        :type: list[str]
        """
        self._user_attribute_filter_types = user_attribute_filter_types

    @property
    def can(self):
        """
        Gets the can of this LookmlModelExploreField.
        Operations the current user is able to perform on this object

        :return: The can of this LookmlModelExploreField.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this LookmlModelExploreField.
        Operations the current user is able to perform on this object

        :param can: The can of this LookmlModelExploreField.
        :type: dict(str, bool)
        """
        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

