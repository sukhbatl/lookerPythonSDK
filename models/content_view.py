# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ContentView(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ContentView - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'content_type': 'str',
            'content_id': 'str',
            'user_id': 'int',
            'group_id': 'int',
            'view_count': 'int',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'id': 'id',
            'content_type': 'content_type',
            'content_id': 'content_id',
            'user_id': 'user_id',
            'group_id': 'group_id',
            'view_count': 'view_count',
            'can': 'can'
        }

        self._id = None
        self._content_type = None
        self._content_id = None
        self._user_id = None
        self._group_id = None
        self._view_count = None
        self._can = None

    @property
    def id(self):
        """
        Gets the id of this ContentView.
        Unique Id

        :return: The id of this ContentView.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ContentView.
        Unique Id

        :param id: The id of this ContentView.
        :type: int
        """
        self._id = id

    @property
    def content_type(self):
        """
        Gets the content_type of this ContentView.
        Content Type (\"dashboard\" or \"look\")

        :return: The content_type of this ContentView.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """
        Sets the content_type of this ContentView.
        Content Type (\"dashboard\" or \"look\")

        :param content_type: The content_type of this ContentView.
        :type: str
        """
        self._content_type = content_type

    @property
    def content_id(self):
        """
        Gets the content_id of this ContentView.
        Id of dashboard or look specified by content type

        :return: The content_id of this ContentView.
        :rtype: str
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """
        Sets the content_id of this ContentView.
        Id of dashboard or look specified by content type

        :param content_id: The content_id of this ContentView.
        :type: str
        """
        self._content_id = content_id

    @property
    def user_id(self):
        """
        Gets the user_id of this ContentView.
        Id of user content was viewed by

        :return: The user_id of this ContentView.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this ContentView.
        Id of user content was viewed by

        :param user_id: The user_id of this ContentView.
        :type: int
        """
        self._user_id = user_id

    @property
    def group_id(self):
        """
        Gets the group_id of this ContentView.
        Id of group content was viewed by

        :return: The group_id of this ContentView.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this ContentView.
        Id of group content was viewed by

        :param group_id: The group_id of this ContentView.
        :type: int
        """
        self._group_id = group_id

    @property
    def view_count(self):
        """
        Gets the view_count of this ContentView.
        Number of times piece of content was viewed

        :return: The view_count of this ContentView.
        :rtype: int
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """
        Sets the view_count of this ContentView.
        Number of times piece of content was viewed

        :param view_count: The view_count of this ContentView.
        :type: int
        """
        self._view_count = view_count

    @property
    def can(self):
        """
        Gets the can of this ContentView.
        Operations the current user is able to perform on this object

        :return: The can of this ContentView.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this ContentView.
        Operations the current user is able to perform on this object

        :param can: The can of this ContentView.
        :type: dict(str, bool)
        """
        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

