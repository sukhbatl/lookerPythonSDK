# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class DialectInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DialectInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'label': 'str',
            'label_for_database_equivalent': 'str',
            'default_port': 'str',
            'default_max_connections': 'str',
            'supported_options': 'DialectInfoOptions',
            'installed': 'bool',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'name': 'name',
            'label': 'label',
            'label_for_database_equivalent': 'label_for_database_equivalent',
            'default_port': 'default_port',
            'default_max_connections': 'default_max_connections',
            'supported_options': 'supported_options',
            'installed': 'installed',
            'can': 'can'
        }

        self._name = None
        self._label = None
        self._label_for_database_equivalent = None
        self._default_port = None
        self._default_max_connections = None
        self._supported_options = None
        self._installed = None
        self._can = None

    @property
    def name(self):
        """
        Gets the name of this DialectInfo.
        The name of the dialect

        :return: The name of this DialectInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DialectInfo.
        The name of the dialect

        :param name: The name of this DialectInfo.
        :type: str
        """
        self._name = name

    @property
    def label(self):
        """
        Gets the label of this DialectInfo.
        The human-readable label of the connection

        :return: The label of this DialectInfo.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this DialectInfo.
        The human-readable label of the connection

        :param label: The label of this DialectInfo.
        :type: str
        """
        self._label = label

    @property
    def label_for_database_equivalent(self):
        """
        Gets the label_for_database_equivalent of this DialectInfo.
        What the dialect calls the equivalent of a normal SQL table

        :return: The label_for_database_equivalent of this DialectInfo.
        :rtype: str
        """
        return self._label_for_database_equivalent

    @label_for_database_equivalent.setter
    def label_for_database_equivalent(self, label_for_database_equivalent):
        """
        Sets the label_for_database_equivalent of this DialectInfo.
        What the dialect calls the equivalent of a normal SQL table

        :param label_for_database_equivalent: The label_for_database_equivalent of this DialectInfo.
        :type: str
        """
        self._label_for_database_equivalent = label_for_database_equivalent

    @property
    def default_port(self):
        """
        Gets the default_port of this DialectInfo.
        Default port number

        :return: The default_port of this DialectInfo.
        :rtype: str
        """
        return self._default_port

    @default_port.setter
    def default_port(self, default_port):
        """
        Sets the default_port of this DialectInfo.
        Default port number

        :param default_port: The default_port of this DialectInfo.
        :type: str
        """
        self._default_port = default_port

    @property
    def default_max_connections(self):
        """
        Gets the default_max_connections of this DialectInfo.
        Default number max connections

        :return: The default_max_connections of this DialectInfo.
        :rtype: str
        """
        return self._default_max_connections

    @default_max_connections.setter
    def default_max_connections(self, default_max_connections):
        """
        Sets the default_max_connections of this DialectInfo.
        Default number max connections

        :param default_max_connections: The default_max_connections of this DialectInfo.
        :type: str
        """
        self._default_max_connections = default_max_connections

    @property
    def supported_options(self):
        """
        Gets the supported_options of this DialectInfo.
        Option support details

        :return: The supported_options of this DialectInfo.
        :rtype: DialectInfoOptions
        """
        return self._supported_options

    @supported_options.setter
    def supported_options(self, supported_options):
        """
        Sets the supported_options of this DialectInfo.
        Option support details

        :param supported_options: The supported_options of this DialectInfo.
        :type: DialectInfoOptions
        """
        self._supported_options = supported_options

    @property
    def installed(self):
        """
        Gets the installed of this DialectInfo.
        Is the supporting driver installed

        :return: The installed of this DialectInfo.
        :rtype: bool
        """
        return self._installed

    @installed.setter
    def installed(self, installed):
        """
        Sets the installed of this DialectInfo.
        Is the supporting driver installed

        :param installed: The installed of this DialectInfo.
        :type: bool
        """
        self._installed = installed

    @property
    def can(self):
        """
        Gets the can of this DialectInfo.
        Operations the current user is able to perform on this object

        :return: The can of this DialectInfo.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this DialectInfo.
        Operations the current user is able to perform on this object

        :param can: The can of this DialectInfo.
        :type: dict(str, bool)
        """
        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

