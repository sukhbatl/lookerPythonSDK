# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class LookmlModelExploreJoins(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LookmlModelExploreJoins - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'dependent_fields': 'list[str]',
            'fields': 'list[str]',
            'foreign_key': 'str',
            '_from': 'str',
            'outer_only': 'bool',
            'relationship': 'str',
            'required_joins': 'list[str]',
            'sql_foreign_key': 'str',
            'sql_on': 'str',
            'sql_table_name': 'str',
            'type': 'str',
            'view_label': 'str',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'name': 'name',
            'dependent_fields': 'dependent_fields',
            'fields': 'fields',
            'foreign_key': 'foreign_key',
            '_from': 'from',
            'outer_only': 'outer_only',
            'relationship': 'relationship',
            'required_joins': 'required_joins',
            'sql_foreign_key': 'sql_foreign_key',
            'sql_on': 'sql_on',
            'sql_table_name': 'sql_table_name',
            'type': 'type',
            'view_label': 'view_label',
            'can': 'can'
        }

        self._name = None
        self._dependent_fields = None
        self._fields = None
        self._foreign_key = None
        self.__from = None
        self._outer_only = None
        self._relationship = None
        self._required_joins = None
        self._sql_foreign_key = None
        self._sql_on = None
        self._sql_table_name = None
        self._type = None
        self._view_label = None
        self._can = None

    @property
    def name(self):
        """
        Gets the name of this LookmlModelExploreJoins.
        Name of this join (and name of the view to join)

        :return: The name of this LookmlModelExploreJoins.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LookmlModelExploreJoins.
        Name of this join (and name of the view to join)

        :param name: The name of this LookmlModelExploreJoins.
        :type: str
        """
        self._name = name

    @property
    def dependent_fields(self):
        """
        Gets the dependent_fields of this LookmlModelExploreJoins.
        Fields referenced by the join

        :return: The dependent_fields of this LookmlModelExploreJoins.
        :rtype: list[str]
        """
        return self._dependent_fields

    @dependent_fields.setter
    def dependent_fields(self, dependent_fields):
        """
        Sets the dependent_fields of this LookmlModelExploreJoins.
        Fields referenced by the join

        :param dependent_fields: The dependent_fields of this LookmlModelExploreJoins.
        :type: list[str]
        """
        self._dependent_fields = dependent_fields

    @property
    def fields(self):
        """
        Gets the fields of this LookmlModelExploreJoins.
        Fields of the joined view to pull into this explore

        :return: The fields of this LookmlModelExploreJoins.
        :rtype: list[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """
        Sets the fields of this LookmlModelExploreJoins.
        Fields of the joined view to pull into this explore

        :param fields: The fields of this LookmlModelExploreJoins.
        :type: list[str]
        """
        self._fields = fields

    @property
    def foreign_key(self):
        """
        Gets the foreign_key of this LookmlModelExploreJoins.
        Name of the dimension in this explore whose value is in the primary key of the joined view

        :return: The foreign_key of this LookmlModelExploreJoins.
        :rtype: str
        """
        return self._foreign_key

    @foreign_key.setter
    def foreign_key(self, foreign_key):
        """
        Sets the foreign_key of this LookmlModelExploreJoins.
        Name of the dimension in this explore whose value is in the primary key of the joined view

        :param foreign_key: The foreign_key of this LookmlModelExploreJoins.
        :type: str
        """
        self._foreign_key = foreign_key

    @property
    def _from(self):
        """
        Gets the _from of this LookmlModelExploreJoins.
        Name of view to join

        :return: The _from of this LookmlModelExploreJoins.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this LookmlModelExploreJoins.
        Name of view to join

        :param _from: The _from of this LookmlModelExploreJoins.
        :type: str
        """
        self.__from = _from

    @property
    def outer_only(self):
        """
        Gets the outer_only of this LookmlModelExploreJoins.
        Specifies whether all queries must use an outer join

        :return: The outer_only of this LookmlModelExploreJoins.
        :rtype: bool
        """
        return self._outer_only

    @outer_only.setter
    def outer_only(self, outer_only):
        """
        Sets the outer_only of this LookmlModelExploreJoins.
        Specifies whether all queries must use an outer join

        :param outer_only: The outer_only of this LookmlModelExploreJoins.
        :type: bool
        """
        self._outer_only = outer_only

    @property
    def relationship(self):
        """
        Gets the relationship of this LookmlModelExploreJoins.
        many_to_one, one_to_one, one_to_many, many_to_many

        :return: The relationship of this LookmlModelExploreJoins.
        :rtype: str
        """
        return self._relationship

    @relationship.setter
    def relationship(self, relationship):
        """
        Sets the relationship of this LookmlModelExploreJoins.
        many_to_one, one_to_one, one_to_many, many_to_many

        :param relationship: The relationship of this LookmlModelExploreJoins.
        :type: str
        """
        self._relationship = relationship

    @property
    def required_joins(self):
        """
        Gets the required_joins of this LookmlModelExploreJoins.
        Names of joins that must always be included in SQL queries

        :return: The required_joins of this LookmlModelExploreJoins.
        :rtype: list[str]
        """
        return self._required_joins

    @required_joins.setter
    def required_joins(self, required_joins):
        """
        Sets the required_joins of this LookmlModelExploreJoins.
        Names of joins that must always be included in SQL queries

        :param required_joins: The required_joins of this LookmlModelExploreJoins.
        :type: list[str]
        """
        self._required_joins = required_joins

    @property
    def sql_foreign_key(self):
        """
        Gets the sql_foreign_key of this LookmlModelExploreJoins.
        SQL expression that produces a foreign key

        :return: The sql_foreign_key of this LookmlModelExploreJoins.
        :rtype: str
        """
        return self._sql_foreign_key

    @sql_foreign_key.setter
    def sql_foreign_key(self, sql_foreign_key):
        """
        Sets the sql_foreign_key of this LookmlModelExploreJoins.
        SQL expression that produces a foreign key

        :param sql_foreign_key: The sql_foreign_key of this LookmlModelExploreJoins.
        :type: str
        """
        self._sql_foreign_key = sql_foreign_key

    @property
    def sql_on(self):
        """
        Gets the sql_on of this LookmlModelExploreJoins.
        SQL ON expression describing the join condition

        :return: The sql_on of this LookmlModelExploreJoins.
        :rtype: str
        """
        return self._sql_on

    @sql_on.setter
    def sql_on(self, sql_on):
        """
        Sets the sql_on of this LookmlModelExploreJoins.
        SQL ON expression describing the join condition

        :param sql_on: The sql_on of this LookmlModelExploreJoins.
        :type: str
        """
        self._sql_on = sql_on

    @property
    def sql_table_name(self):
        """
        Gets the sql_table_name of this LookmlModelExploreJoins.
        SQL table name to join

        :return: The sql_table_name of this LookmlModelExploreJoins.
        :rtype: str
        """
        return self._sql_table_name

    @sql_table_name.setter
    def sql_table_name(self, sql_table_name):
        """
        Sets the sql_table_name of this LookmlModelExploreJoins.
        SQL table name to join

        :param sql_table_name: The sql_table_name of this LookmlModelExploreJoins.
        :type: str
        """
        self._sql_table_name = sql_table_name

    @property
    def type(self):
        """
        Gets the type of this LookmlModelExploreJoins.
        The join type: left_outer, full_outer, inner, or cross

        :return: The type of this LookmlModelExploreJoins.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this LookmlModelExploreJoins.
        The join type: left_outer, full_outer, inner, or cross

        :param type: The type of this LookmlModelExploreJoins.
        :type: str
        """
        self._type = type

    @property
    def view_label(self):
        """
        Gets the view_label of this LookmlModelExploreJoins.
        Label to display in UI selectors

        :return: The view_label of this LookmlModelExploreJoins.
        :rtype: str
        """
        return self._view_label

    @view_label.setter
    def view_label(self, view_label):
        """
        Sets the view_label of this LookmlModelExploreJoins.
        Label to display in UI selectors

        :param view_label: The view_label of this LookmlModelExploreJoins.
        :type: str
        """
        self._view_label = view_label

    @property
    def can(self):
        """
        Gets the can of this LookmlModelExploreJoins.
        Operations the current user is able to perform on this object

        :return: The can of this LookmlModelExploreJoins.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this LookmlModelExploreJoins.
        Operations the current user is able to perform on this object

        :param can: The can of this LookmlModelExploreJoins.
        :type: dict(str, bool)
        """
        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

