# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class DashboardLayoutComponent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DashboardLayoutComponent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'dashboard_layout_id': 'int',
            'dashboard_element_id': 'int',
            'row': 'int',
            'column': 'int',
            'width': 'int',
            'height': 'int',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'id': 'id',
            'dashboard_layout_id': 'dashboard_layout_id',
            'dashboard_element_id': 'dashboard_element_id',
            'row': 'row',
            'column': 'column',
            'width': 'width',
            'height': 'height',
            'can': 'can'
        }

        self._id = None
        self._dashboard_layout_id = None
        self._dashboard_element_id = None
        self._row = None
        self._column = None
        self._width = None
        self._height = None
        self._can = None

    @property
    def id(self):
        """
        Gets the id of this DashboardLayoutComponent.
        Unique Id

        :return: The id of this DashboardLayoutComponent.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DashboardLayoutComponent.
        Unique Id

        :param id: The id of this DashboardLayoutComponent.
        :type: int
        """
        self._id = id

    @property
    def dashboard_layout_id(self):
        """
        Gets the dashboard_layout_id of this DashboardLayoutComponent.
        Id of Dashboard Layout

        :return: The dashboard_layout_id of this DashboardLayoutComponent.
        :rtype: int
        """
        return self._dashboard_layout_id

    @dashboard_layout_id.setter
    def dashboard_layout_id(self, dashboard_layout_id):
        """
        Sets the dashboard_layout_id of this DashboardLayoutComponent.
        Id of Dashboard Layout

        :param dashboard_layout_id: The dashboard_layout_id of this DashboardLayoutComponent.
        :type: int
        """
        self._dashboard_layout_id = dashboard_layout_id

    @property
    def dashboard_element_id(self):
        """
        Gets the dashboard_element_id of this DashboardLayoutComponent.
        Id Of Dashboard Element

        :return: The dashboard_element_id of this DashboardLayoutComponent.
        :rtype: int
        """
        return self._dashboard_element_id

    @dashboard_element_id.setter
    def dashboard_element_id(self, dashboard_element_id):
        """
        Sets the dashboard_element_id of this DashboardLayoutComponent.
        Id Of Dashboard Element

        :param dashboard_element_id: The dashboard_element_id of this DashboardLayoutComponent.
        :type: int
        """
        self._dashboard_element_id = dashboard_element_id

    @property
    def row(self):
        """
        Gets the row of this DashboardLayoutComponent.
        Row

        :return: The row of this DashboardLayoutComponent.
        :rtype: int
        """
        return self._row

    @row.setter
    def row(self, row):
        """
        Sets the row of this DashboardLayoutComponent.
        Row

        :param row: The row of this DashboardLayoutComponent.
        :type: int
        """
        self._row = row

    @property
    def column(self):
        """
        Gets the column of this DashboardLayoutComponent.
        Column

        :return: The column of this DashboardLayoutComponent.
        :rtype: int
        """
        return self._column

    @column.setter
    def column(self, column):
        """
        Sets the column of this DashboardLayoutComponent.
        Column

        :param column: The column of this DashboardLayoutComponent.
        :type: int
        """
        self._column = column

    @property
    def width(self):
        """
        Gets the width of this DashboardLayoutComponent.
        Width

        :return: The width of this DashboardLayoutComponent.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this DashboardLayoutComponent.
        Width

        :param width: The width of this DashboardLayoutComponent.
        :type: int
        """
        self._width = width

    @property
    def height(self):
        """
        Gets the height of this DashboardLayoutComponent.
        Height

        :return: The height of this DashboardLayoutComponent.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """
        Sets the height of this DashboardLayoutComponent.
        Height

        :param height: The height of this DashboardLayoutComponent.
        :type: int
        """
        self._height = height

    @property
    def can(self):
        """
        Gets the can of this DashboardLayoutComponent.
        Operations the current user is able to perform on this object

        :return: The can of this DashboardLayoutComponent.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this DashboardLayoutComponent.
        Operations the current user is able to perform on this object

        :param can: The can of this DashboardLayoutComponent.
        :type: dict(str, bool)
        """
        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

